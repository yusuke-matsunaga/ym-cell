				liberty 文法覚書

- 基本的な構文として
  * simple attribute
  * complex attribute
  * group statement
  の3種類がある．
  根本は library group statement でその下に再帰的に属性を持つ．


- simple attribute は
  <属性名> : <属性値> ;
  のシンタックスで表される．
  属性値とそれを表すクラスは以下の通り．
  * int                  -> AstInt
  * bool		 -> AstBool
  * 'clear_preset_var_n' -> AstCPType
  * 'delay_model'        -> AstDelayModel
  * 'direction'		 -> AstPinDirection
  * expr                 -> AstExpr
  * float		 -> AstFloat
  * function             -> AstExpr
  * string		 -> AstString
  * 'technology'         -> AstTechnology
  * 'timing_sense'	 -> AstTimingSense
  * 'timing_type'	 -> AstTimingType
  * 'variable_type'	 -> AstVarType
  がある．

  このなかの delay_model, direction, timing_sense, timing_type,
  var_type は string 型の特定な文字列のみを受け付ける．
  また，論理式は見かけは simple attribute だが，属性値の部分に空白を含
  むためパーサー的には別に扱う．
  ややこしいのは文字列中に式を書いた function 記述という型もある．
  こちらは一旦文字列としてパースしてから式に変換する．
  前者は ExprHandler，後者は FuncHandler で表す．
  論理式は FuncHandler で扱う．

  実装ファイルは DotlibParser_simple.cc にある．


- complex attribute は
  <属性名> ( <属性値1>, <属性値2>, ... ) ;
  のシンタックスで表される．
  属性値は simple attribute と同じ．ただし expr はない．
  個々の属性ごとに属性値の型は決まっている．

  こちらもめんどくさいのは見かけは一つの文字列だが，中が空白で区切られ
  た数値の場合がある(lookup table の values 属性等)．
  そのため特別なハンドラを用意する．

  後述の group statement のヘッダと complex attribute は全く同じ形式な
  ので同一のハンドラ(HeaderHandler)で読み込む．


- group statement は
  <属性名> ( <属性値1>, <属性値2>, ... ) {
     <属性記述1>
     <属性記述2>
     ...
  }
  のシンタックスで表される．
  最初の行は行末の '{' 以外は complex attribute と同様である．
  属性記述には simple attribute, complex attribute, group statement が記述できる．


- complex attribute と group statement のヘッダ部分は以下の種類がある．

  * EmptyHandler           : ( )
  * FloatFloatHandler      : ( float, float )
  * FloatStrHandler        : ( float, string )
  * FloatVectorHandler     : ( "float, float, ..." )
  * FloatVectorListHandler : ( "float, float, ...", "float, flot, ...", ... )
  * IntFloatHandler        : ( integer, float )
  * IntFloatVectorHandler  : ( integer, "float, float, ..." )
  * IntVectorHandler       : ( "integer, integer, ..." )
  * StrHandler             : ( string )
  * StrIntHandler          : ( string, integer )
  * StrListHandler         : ( string, string, ... )
  * StrStrHandler          : ( string, string )
  * StrStrIntHandler       : ( string, string, integer )


- 属性には，必須/オプショナルなものと，唯一/複数のものがある．


- パーサーの基本構造としては simple attribute, complex attribute,
  group statement の各属性用のパース関数を作る．
  そのなかで個々の属性に応じた処理を行うため DotlibHandler
  というクラスを用いる．
  この DotlibHandler を継承したクラスが実際のパース処理を行う．

- パースした構文木を表すために AstNode というクラスを用意する．
  実際には AstNode の派生クラスの木構造で構文木を表す．

- 例えば xxx という型をパースする DotlibParser のメンバ関数は

  bool
  DotlibParser::parse_xxx(const AstXxx*& dst,
  			  AttrType attr_type,
			  const FileRegion& attr_loc);

  というインターフェイスを持つ．
  dst にパース結果が入る．
  もしも同一の属性をもつ要素を複数持つ場合には，

  bool
  DotlibParser::parse_xxx(vector<const AstXxx*>& dst_list,
  			  AttrType attr_type,
			  const FileRegion& attr_loc);

  というインターフェイスを持つ．
  dst_list にパース結果が追加される．


- complex attribute とそれに対応する AstNode の派生クラス
  * 'coefs'              -> AstFloatVector
  * (float, float)       -> (AstFloat, AstFloat)
  * 'index_n'            -> AstFloatVector
  * 'orders'             -> AstIntVector
  * 'piece wise'         -> AstPieceWise
  * 'unit'               -> (AstString, AstFloat)
  * 'values'             -> AstFloatVector
  * 'variable_n_range'   -> AstVariableRange


- group statement とそれに対応する AstNode の派生クラス
  * 'bus'                -> AstBus
  * 'bundle'             -> AstBundle
  * 'cell'               -> AstCell
  * 'cell_degradation'   -> AstCellDegradation
  * 'domain'             -> AstDomain
  * 'ff'                 -> AstFF
  * 'ff_bank'            -> AstFFBank
  * 'input_voltage'      -> AstInputVoltage
  * 'latch'              -> AstLatch
  * 'latch_bank'         -> AstLatchBank
  * 'library'            -> AstLibrary
  * 'lu_table'           -> AstLut
  * 'output_voltage'     -> AstOutputVoltage
  * 'pin'                -> AstPin
  * 'statetable'         -> AstStatetable
  * 'template'           -> AstTemplate
  * 'timing'             -> AstTiming


- AstXXX はコンストラクタで値を設定したらあとは const にしたいので，
  AstXXX を読み込む XXXHandler に一旦必要な値を保持しておいて
  XXXHandler を AstXXX のコンストラクタに渡す．いわゆるビルダークラス
  パターン.
  このような二度手間にしている理由は3つ．
  * 可変長のリストをビルダクラス中では vector<> で保持しておいて
    AstXXX のコンストラクタでは固定長の配列として確保する．
  * パース途中でエラーが起こった場合に AstXXX のオブジェクトを確保
    しない．ビルダークラスのオブジェクトは自動変数として確保しておくの
    でエラー時には自動的に削除される．
  * AstXXX のコンストラクタのパラメータが簡潔になる．


- AstXXX, XXXHandler と関連した情報を持つのでもととなるデータからこれ
  らのクラスのヘッダファイルとソースファイルを自動生成する
  Python スクリプトを用意する．
  一旦，ファイルを作ってしまえば仕様変更がない限り再度生成する必要はな
  いので，生成後のファイルに手直しをすることも可能．


- Group のパースの流れ
  DotlibParser::parse_xxx() 中で適切な HeaderHandler と GroupHandler
  を用いて DotlibParser::parse_group_statement(header_handler, group_handler)
  を呼び出す．
  結果が true なら AstMgr::new_XXX(header_handler, group_handler) で
  新しい構文木を生成する．


- 以下，整理されていないおぼえ書き


- "ff" と ff は同じ．というか文字列が予想される場合には " はあってもな
  くても同じ結果になる．異なるのは間に空白を含む場合．これは " がなけ
  ればならない．

- include_file ( filename );
  結構，制限があるし，今はあまり使われていないみたい．
  ここでは無視する．

- bus_naming_style が省略された場合のデフォルト値は
  "Bus%sPin%d"

- current_unit は
  1uA, 10uA, 100uA, 1mA, 10mA, 100mA, 1A
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- delay_model が省略された場合のデフォルト値は generic_cmos
  可能な値は generic_cmos, table_lookup, piecewise_cmos, dcm, polynomial

- fpga_domain_style は domain group 中の calc_mode で参照される．

- in_place_swap_mode は match_footprint か no_swapping

- {input|output}_threshold_pct_{rise|fall} の値は 0.0 から 100.0 の間の値

- piece_type は piece_length, piece_wire_cap, piece_pin_cap,
  piece_total_cap

- power_model は table_lookup, polynomical．デフォルトは table_lookup

- preferred_output_pad_slew_rate_control は high, medium, low, none

- power_unit は
  1mW, 100uW, 10uW, 1uW, 100nW, 10nW, 1nW, 100pW, 10pW, 1pW
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- resistance_unit は
  1ohm, 10ohm, 100ohm, 1kohm
  のいずれか．
  "" なしが認められるかは不明だがあると思った方がよい．

- revision の値は string or number といっているが，
  1.01a というのもあるので [0-9a-zA-Z.]* でいいのでは？
  もしくは非空白印字可能文字は全部含めてしまってもいいかも．

- slew_derate_from_library の値は 0.0 から 1.0 の間

- slew_{upper|lower}_threshold_pct_{rise|fall} の値は 0.0 から 100.0 の間

- time_unit は
  1ps, 10ps, 100ps, 1ns
  のいずれか．デフォルトは 1ns
  用例をみるかぎり "" なしもあるみたい．

- voltage_unit は
  1mV, 10mV, 100mV, 1V．デフォルトは 1V
  用例をみるかぎり "" なしもあるみたい．

- default_wire_load_mode は top | segmented | enclosed

- capacitive_load_unit ( value_(float), unit_(enum) ) ;
  value は任意の float．
  unit は ff か pf

- default_part ( default_part_name_(string), speed_grade_(string) ) ;

- define ( "attribute_name", "group_name", "attribute_type" ) ;
  attribute_name : 属性名
  group_name : この属性が属するグループ名
  attribute_type : Boolean, string, integer, float のいずれか

- define_cell_area (area_name, resource_type) ;
  resource_type は pad_slots, pad_input_driver_sites,
  pad_output_driver_sites, pad_driver_sites

- define_group ( group_(id), parent_name_(id) ) ;
  group : グループ名
  parent_name : 親のグループ名

- library_features の値は report_delay_calculation,
  report_power_calculation, report_noise_calculation,
  report_user_data, allow_update_attribute
  デフォルトは none (そんな値ないじゃん)．
  これ complex attribute なのでもしかしたら
  これらの値が複数来ることがあるような気がする．

- routing_layers は routability information の前に定義されなければなら
  ない．
  この属性は唯一

- technology の値は cmos か fpga．デフォルトは cmos

- voltage_map ( voltage_name_(id), voltage_value_(float) ) ;
  string と float の組．
  複数ありうる．

- base_curves Group statement
  base_curves ( name ) {
    base_curve_type ( ccs_timing_half_curve ); // これのみ
    curve_x ( "float, float, ..." );
    curve_y ( id, "float, float, ..." );
  }

  * base_curve_type complex attribute は文字列を引数にとるが，
    現在は ccs_timing_half_curve のみが適正な値

  * curve_x complex attribute は浮動小数点数のリストの文字列を引数にと
    る．
  * curve_y complex attribute はID番号(integer)と浮動小数点数のリスト
    の文字列を引数にとる．

  * これら3つの属性は必須，and 唯一

- compact_lut_template Group statement
  compact_lut_template ( name ) {
    base_curves_group : string ;
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "string, string, ..." ) ;
  }

  * variable_1 と variable_2 の値は
    input_net_transition | total_output_net_capacitance

  * variable_3 の値は curve_parameters のみ

  * index_3 の文字列は init_current, peak_current, peak_voltage,
    peak_time, left_id, right_id

- dc_current_template Group statement
  dc_current_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
  }

  * variable_1, variable_2, variable_3 の値は
    2次元の場合は variable_1 が input_voltage，
    variable_2 が output_voltage
    3次元の場合は variable_1 が input_net_transition，
    variable_2 が output_net_transition，
    variable_3 が time

- em_lut_template Group statement
  em_lut_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    index_1 : ( "float, float, ..." ) ;
    index_2 : ( "float, float, ..." ) ;
  }

  * variable_1, variable2 の値は input_transition_time か
    total_output_net_capacitance

- {rise|fall}_net_delay Group statement
  fall_net_delay ( name ) {
  index_1 ( "float, float, ..." ) ;
  index_2 ( "float, float, ..." ) ;
  values ( "float, float, ...", "float, float, ...", ... ) ;
  }

  * 通常の table group

- {rise|fall}_transition_degradation Group statement
  * 通常の table group

- fault_lut_template Group statement
  fault_lut_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    index_1 ( "string, string, ..." ) ;
    index_2 ( "float, float, ..." ) ;
  }

  * variable_1 は fab_name
  * variable_2 は time_range

- input_voltage Group statement
  input_voltage ( name ) {
  vil : v_expr ;
  vih : v_expr ;
  vimin : v_expr ;
  vimax : v_expr ;
  }

- input_voltage や output_voltage に出てくる expression は
  以下みたいな感じ？
  expression : float_number
  	     | 'VDD'
	     | 'VSS'
	     | 'VCC'
             | '(' expression ')'
	     | '+' expression
	     | '-' expression
	     | expression '+' expression
	     | expression '-' expression
	     | expression '*' expression
	     | expression '/' expression

- fpga_isd Group statement
  fpga_isd ( name ) {
    drive : string ; // といいつつ Example では drive : 24 ; になってる．
    io_type : string ;
    slew : FAST | SLOW ;
  }

- iv_lut_template Group statement
  iv_lut_template ( name ) {
    variable_1 : iv_output_voltage ; // これ一択
    index_1 ( "float, float, ..." ) ;
  }

- lu_table_template Group statement
  lu_table_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    variable_4 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
    index_4 ( "float, float, ..." ) ;
    domain ( name ) { ... }
  }

  * In Composite Current Source (CCS) Noise Tables
    * ccsn_first_stage, ccsn_last_stage グループ内の以下のグループで使われる．

    * dc_current group

      variable_1 : input_voltage ;
      variable_2 : output_votage ;

    * output_current_rise group and output_current_fall group

      variable_1 : input_net_transition ;
      variable_2 : total_output_net_capacitance ;
      variable_3 : time ;

    * propagated_noise_low group and propagate_noise_high group

      variable_1 : input_noise_height ;
      variable_2 : input_noise_width ;
      variable_3 : total_output_net_capacitance ;
      variable_4 : time ;

  * In Timing Delay Tables

    variable_n に使える値は以下の通り

    input_net_transition
    total_output_net_capacitance
    output_net_length
    output_net_wire_cap
    output_net_pin_cap
    related_out_total_output_net_capacitance
    related_out_output_net_length
    related_out_output_net_wire_cap
    related_out_output_net_pin_cap

  * In Constraint Tables

    variable_n に使える値は以下の通り

    constrained_pin_transition
    related_pin_transition
    related_out_total_output_net_capacitance
    related_out_output_net_length
    related_out_output_net_wire_cap
    related_out_output_net_pin_cap

  * In Wire Delay Tables

    variable_n に使える値は以下の通り

    fanout_number
    fanout_pin_capacitance
    driver_slew

  * In Net Delay Tables

    variable_{1,2} に使える値は以下の通り

    output_transition
    rc_product

  * In Degradation Tables

    transition time degradation table の variable_{1,2} に使える値は以下の通り

    output_pin_transition
    connect_delay

    cell degradation table の variable_1 に使える値は以下の通り

    input_net_transition

- domain Group statement
  domain ( name ) {
    calc_mode : string ;
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
  }
  domain Group は複数あり得る．

- maxcap_lut_template Group statement

  variable_1 : frequency ;
  vairable_2 : input_transition_time ;

- maxtrans_lut_template Group statement

  variable_1 : frequency ;
  variable_2 : input_transition_time ;
  variable_3 : total_output_net_capacitance ;

- noise_lut_template Group statement

  variable_1, variable_2 に使える値は
  input_noise_width と total_output_net_capacitance

- operationg_conditions Group statement
  operating_conditions ( name ) {
    calc_mode : string ;
    parameteri : float ; // i = 1..5
    process : float ; // 0.0 - 100.0
    temperature : float ;
    tree_type : string ; // best_case_tree, balanced_tree, worst_case_treen
    voltage : float ;
    power_rail ( string, float ) ; // one or more
  }

- output_current_template Group statement

  variable_1 と variable_2 に使える値は
  input_net_transition, total_output_net_capacitance
  variable_3 に使える値は time

- output_voltage Group statement
  output_voltage ( name ) {
    vol: v_expr ;
    voh: v_expr ;
    vomin: v_expr ;
    vomax: v_expr ;
  }

- part Group statement
  part ( name ) {
    default_step_level : string ;
    fpga_isd : string ;
    num_blockrams : integer ;
    num_cols : integer ;
    num_ffs : integer ;
    num_luts : integer ;
    num_rows : integer ;
    pin_count : 94 ;
    max_count ( string, integer ) ; // 複数あり
    valid_speed_grade ( string, string, ... ) ;
    valid_step_levels ( string, string, ... ) ;
    speed_grade () { }
  }

- speed_grade Group statement
  speed_grade ( name ) {
    fpga_isd : string ;
    step_level ( string ) ;
  }

- pg_current_template Group statement

  variable_{1,2,3,4} に使える値は
  input_net_transition
  total_output_net_capacitance
  time

  最後は必ず time でなければならない．
  input_net_transition は 0 か 1
  total_output_net_capacitance は 0 - 2

  index_n はオプション

- poly_template Group statement
  poly_template ( name ) {
    variables ( string, string, ... ) ;
    variable_{1,2,3,4}_range ( float, float ) ;
    mapping ( string, string ) ;
    oders ( integer, integer, ... ) ;
    domain ( name ) { ... }
  }

  * mapping ( value_(enum), power_rail_name_(id) )
    value_(enum) は voltage と voltage1 のみ，
    power_rail_name は power_rail の名前
    mapping は 2つ以上は定義できない (voltage と voltage1 の2つ)

  * noise immunity template の場合，variables で使える値は
    input_noise_width
    total_output_net_capacitance
    voltage
    voltagei // i = 1 .. 5?
    temperature
    parametern // n ??

  * noise propagation template の場合，variables で使える値は
    input_hoise_height
    input_noise_width
    input_noise_tiem_to_peak
    total_output_net_capacitance
    voltage, voltagei, temperature
    parametern

  * steady state group の場合，
    iv_output_voltage
    voltage
    voltagei
    temperature
    parametern

  * timing group の場合，以下の4セットとなる．
    - Set 1
      input_net_transition
      constrained_pin_transition

    - Set 2
      total_output_net_capacitance
      output_net_length, output_net_wire_cap
      output_net_pin_cap
      related_pin_transition

    - Set 3
      related_out_total_output_net_capaitance
      related_out_output_net_length
      related_out_output_net_wire_cap
      related_out_output_net_pin_cap

    - Set 4
      temperature, voltage
      voltagei

    マニュアル中の ',' と '|' の使い分けの意味がわからん．

- poly_template 中の domain Group statement
  domain ( name ) {
    calc_mode : string ;
    variables ( string, string, ... ) ;
    variable_{1,2,3,4}_range ( float, float ) ;
    mapping ( string, string ) ;
    orders ( integer, integer, ... ) ;
  }

- power_lut_template Group statement
  通常の template と同じ．

  * variable_1 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

  * variable_2 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

  * variable_3 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

- power_poly_template Group statement
  * 通常の poly_template と同じ

  * variables に使える値は
    equal_or_opposite_output_net_capacitance
    input_net_transition
    total_output_net_capacitance
    output_net_length
    temperature
    voltage
    voltagei
    parameteri

- power_supply Group statement
  power_supply ( name ) {
    default_power_rail : string ;
    power_rail ( string, float ) ;
  }

  * power_rail complex attribute は複数あり得る．

- propagation_lut_template Group statement

  * 通常の template と同じ

  * variable に使える値は以下の通り
    input_noise_width
    input_noise_height
    total_output_net_capacitance

- scaled_cell Group statement

  sclaed_cell ( existing_cell, operating_conditions_group ) {
    area : float ;
    auxiliary_pad_cell : true | false ;
    bus_naming_style : "string" ;
    cell_footprint : string ;
    cell_leakage_power : float ;
    clock_gating_integrated_cell : string ;
    contential_condition : "Boolean expression" ;
    dont_fault : sa0 | sa1 | sa01 ;
    dont_touch : true | false ;
    dont_use : true | false ;
    geometry_print : string ;
    handle_negative_constraint : true | false ;
    is_clock_gating_cell : true | false ;
    map_only : true | false ;
    pad_cell : true | false ;
    pad_type : clock ;
    preferred : true | false ;
    scaling_factors : string ;
    use_for_size_only : true | false ;
    vhdl_name : "string" ;
    pin_equal ( "string, string, ..." ) ;
    pin_opposite ( "string, string, ...", "string, string, ..." ) ;
    rail_connection ( string, string ) ;
    bundle ( ) { ... }
    bus ( ) { ... }
    ff ( ) { ... }
    ff_bank ( ) { ... }
    generated_clock ( ) { ... }
    latch ( ) { ... }
    latch_bank ( ) { ... }
    leakage_power ( ) { ... }
    lut ( ) { ... }
    mode_definition ( ) { ... }
    pin ( ) { ... }
    routing_track ( ) { ... }
    statetable ( ) { ... }
    test_cell ( ) { ... }
    type ( ) { ... }
  }

- sensitization Group statement

  sensitization ( name ) {
    pin_names ( string, string, ... ) ; // 多分唯一
    vector ( integer, string ) ; // 複数
  }

- scaling_factors Group statement

  scaling_factors ( name ) {

  }

  詳細は "Building Environments" chapter in the Library Compiler User
  Guide: Modeling Timing, Signal Integrity, and Power in Technology Libraries.

- timing_range Group statement

  timing_range ( name ) {
    faster_factor : float ;
    slower_factor : float ;
  }

- type Group statement

  type ( name ) {
    base_type : array ; // 'array' 一択
    bit_from : integer ;
    bit_to : integer ;
    bit_width : integer ;
    data_type : bit ; // 'bit' 一択
    downto : true | false ;
  }

- user_parameters Group statement

  user_parameters () {
    parameteri : float ; // i = 1..?
  }

- wire_load Group statement

  wire_load ( name ) {
    area : float ;
    capacitance : float ;
    resistance : float ;
    slope : float ;
    fanout_length ( integer, float, float, float, integer ) ;
  }

  fanout_length の各パラメータは
  fanout : ファンアウト数 (ドライバを除いたピン数)
  length : ネット長
  average_capacitance, standard_deviation, number_of_nets :
           Sysnopsys Floorplan Manager User Guide を見ろ
  Example では最初の2つのパラメータしか定義していない．

- wire_load_selection Group statement

  wire_load_selection ( name ) {
    wire_load_from_area ( float, float, string ) ;
  }

  詳細は "Library Deveopment Procedure" and "Defining I/O Pads"
  chapters in the Library Compiler User Guide: Methodology and
  Modeling Functionality in Technology Libraries and the "Building
  Environments" chapter in the Library Compiler User Guide: Modeling
  Timing, Signal Integrity, and Power in Technology Libraries.

- wire_load_table Group statement

  wire_load_table ( name ) {
    fanout_area ( integer, float ) ;
    fanout_capacitance ( integer, float ) ;
    fanout_length ( integer, float ) ;
    fanout_resistance ( integer, float ) ;
  }

- cell Group statement

  cell ( name ) {
    area : float ;
    auxiliary_pad_cell : true | false ;
    base_name : cell_base_name_(string) ;
    bus_naming_style : "string" ;
    cell_footprint : footprint_type_(string) ;
    cell_leakage_power : float ;
    clock_gating_integrated_cell : string_value ;
    contention_condition : "Boolean expression" ;
    dont_fault : sa0 | sa1 | sa01 ; // string
    dont_touch : true | false ;
    dont_use : true | false ;
    driver_type : name_(id) ;
    edif_name : name_(id) ;
    em_temp_degradation_factor : value_(float) ;
    fpga_cell_type : value_(enum) ; // rising_edge_clock_cell | falling_edge_clock_cell
    fpga_domain_style : name_(id) ;
    geometry_print : string ;
    handle_negative_constraint : true | false ;
    interface_timing : true | false ;
    io_type : name_(id) ;
    is_clock_gating_cell : true | false ;
    is_isolation_cell : true | false ; // マニュアルには Boolean expression と書いてある．
    is_level_shifter : true | false ;
    level_shifter_type : string ; // LH | HL | HL_LH (default)
    map_only : true | false ;
    pad_cell : true | false ;
    pad_type : clock ; // clock のみが有効
    power_cell_type : string ; // stdcell | macro
    power_gating_cell : string ;
    preferred : true | false ;
    scaling_factors : group_name ;
    sensitization_master : string ;
    single_bit_denegerate : string ;
    slew_type : name_(id) ;
    switch_cell_type : string ; // 例では coarse_grain
    threshold_voltage_group : string ;
    timing_model_type : "string" ; // abstracted | extracted | qtm
    use_for_size_only : true | false ;
    vhdl_name : "string" ;

    input_voltage_range ( float, float ) ;
    output_voltage_range ( float, float ) ;
    pin_equal ( "name_list_(string)" ) ; // 多分，複数あり
    pin_name_map ( string, string, ... ) ; // 多分，複数あり
    pin_opposite ( "name_list1_(string)", "name_list2_(string)" ) ; // 多分，複数あり
    rail_connection ( connection_name_(string), power_supply_name_(string) ) ; // 複数あり
    resource_usage ( resource_name_(id), number_of_resources_(id) ) ; // 複数あり

    bundle ( name_(string) ) { } // 複数あり
    bus ( name_(string) ) { } // 複数あり
    dynamic_current () { }
    ff ( variable1_(string), variable2_(string) ) { }
    ff_bank ( variable1_(string), variable2_(string), bits_(integer) ) { }
    functional_yield_metric () { }
    generated_clock ( name ) { } // 複数あり
    intrinsic_parasitic () { }
    latch ( variable1_(string), variable2_(string) ) { }
    latch_banck ( variable1_(string), variable2_(string), bits_(integer) ) { }
    leakage_current () { } // たぶん複数あり
    leakage_power () { } // たぶん複数あり
    lut ( name_(string) ) { }
    mode_definition () { } // たぶん複数あり
    pg_pin ( string ) { } // たぶん複数あり
    pin ( name_(string) | name_list_(string) ) { } // 複数あり
    routing_track ( routing_layer_name_(string) ) { } // たぶん複数あり
    statetable ( "input_node_names", "internal_node_names" ) { }
    test_cell () { }
    type ( name_(string) ) { } // 複数あり
  }

- bundle Group statement

  bundle ( string ) {
    members ( string, string, ... ) ; // 例では string のリストに見える．
    // pin Group の simple attributes
    pin ( string ) { }
  }

- bus Group statement

  bus ( string ) {
    bus_type : string ; // library の type グループ名
    pin ( string [, string, ... ] ) {
    }
  }

  bus 内のピン名は A[0:3] とか A[4] という記述がある．

- dynamic_current Group statement

  dynamic_current () {
    when : "Boolean expression" ;
    related_inputs : string ; // required, (unique?)
    related_outputs : string ; // optional, (unique?)
    typical_capacitances ( "float, float, ..." ) ; // 要素数はrelated_outputs のピン数と同じ
    switching_group () { } // たぶん，複数あり
  }

  related_inputs, related_outputs は文字列だが "" 内の空白で区切られた複数のピン名のリストを表す．

- switching_group Group statement

  switching_group () {
    input_switching_condition ( string, string, ... ) ; // rise | fall
    output_switching_condition ( string, string, ... ) ; // rise | fall
    min_input_switching_count : integer ;
    max_input_switching_count : integer ;
    pg_current () { }
  }

  input_switching_condition, output_switching_condition は simple
  attribute と書いてあるがどう見ても complex attribute．
  多分，ピン数分の rise|fall が並ぶものと思われる．

- pg_current Group statement

  pg_current () {
    vector () { } // 複数あり
  }

- vector Group statement

  vector () {
    index_1 ( "float, float, ..." ) ; // なぜかマニュアルには <float> と謎表記
    index_2 ( "float, float, ..." ) ; // なぜかマニュアルには <float> と謎表記
    index_3 ( "float, float, ..." ) ;
    index_4 ( "float, float, ..." ) ;
    index_output : string ; // <output_pin_name>
    reference_time : float ; // <float>
    values ( "float, float, ..." ) ;
  }

  この辺のマニュアル書いてる人は simple attribute と complex attribute
  を混同してる．
  values に至っては values : ( "0.002, 0.009, .." ) ;
  などとわけのわからない記述例を載せている．

- ff Group statement

  ff ( string, string ) {
    clear : "Boolean expression" ;
    clear_preset_var1 : L | H | N | T | X ;
    clear_preset_var2 : L | H | N | T | X ;
    clocked_on : "Boolean expression" ;
    clocked_on_also : "Boolean expression" ;
    next_state : "Boolean expression" ;
    preset : "Boolean expression" ;
  }

- ff_bank Group statement

  ff_bank ( string, string, integer ) {
    clear : "Boolean expression" ;
    clear_preset_var1 : L | H | N | T | X ;
    clear_preset_var2 : L | H | N | T | X ;
    clocked_on : "Boolean expression" ;
    clocked_on_also : "Boolean expression" ;
    next_state : "Boolean expression" ;
    preset : "Boolean expression" ;
  }

  中身は ff group と同じ

- fpga_condition Group statement

  fpga_condition ( string ) {
    fpga_condition_value ( string ) { } // たぶん，複数あり
  }

- fpga_condition_value Group statement

  fpga_condition_value ( string ) {
    fpg_arc_condition : true | false ;
  }

  果てしなく馬鹿で無駄な構文
  fpga_condition_value を complex attribute にすればよいのでは？

- functional_yield_metric Group statement

  functional_yield_metric () {
    average_number_of_faults ( string ) { }
  }

- average_number_of_faults Group statement

  average_number_of_faults ( string ) { // faults_lut_template 名
    values ( 例のやつ ) ;
  }

- generated_clock Group statement

  generated_clock ( string ) {
    clock_pin : string ; // 空白で区切られたピン名のリスト
    master_pin : string ;
    divided_by : integer ;
    multipled_by : integer ;
    invert : true | false ;
    duty_cycle : float ;
    edges ( integer, integer, integer ) ; // 常に 3
    shifts ( float, float, float ) ; // 常に 3
  }

- intrinsic_parasitic Group statement

  intrinsic_parasitic ( string ) {
    when : "Boolean expression" ;
    intrinsic_capacitance ( string ) {
      related_output : string ; // マニュアルには related_outputs の記述もあり．
      value : float ;
    } // 複数あり
    intrinsic_resistance ( string ) {
      value : float ;
    } // 複数あり
    total_capacitance ( string ) {
      value : float ;
    }
  }

  これ ３つとも complex attribute で出来るじゃん．

- latch Group statement

  latch ( string, string ) {
    clear : "Boolean expression" ;
    clear_preset_var1 : L | H | N | T | X ;
    clear_preset_var2 : L | H | N | T | X ;
    data_in : "Boolean expression" ;
    enable : "Boolean expression" ;
    enable_also : "Boolean expression" ;
    preset : "Boolean expression" ;
  }

- latch_bank Group statement

  latch_bank ( string, string, integer ) {
    clear : "Boolean expression" ;
    clear_preset_var1 : L | H | N | T | X ;
    clear_preset_var2 : L | H | N | T | X ;
    data_in : "Boolean expression" ;
    enable : "Boolean expression" ;
    enable_also : "Boolean expression" ;
    preset : "Boolean expression" ;
  }

  中身は latch と同じ

- leakage_current Group statement

  leakage_current () {
    when : "Boolean expression" ;
    value : float ; // pg_current の代わり
    pg_current ( string) { // たぶん複数あり
      value : float ;
    }
    gate_leakage ( string ) {
      input_low_value : float ;
      input_high_value : float ;
    }
  }

- leakage_power Group statement

  leakage_power () {
    power_level : string ;
    related_pg_pin : string ;
    when : "Boolean expression" ;
    value : float ;
  }

- lut Group statement

  lut ( string ) {
    input_pins : string ; // 空白で区切られたピンのリスト
  }

- mode_definition Group statement

  mode_definition ( string ) {
    mode_value ( string ) { // 複数あり
      when : "Boolean expression" ;
      sdf_cond : string ;
    }
  }

- pg_pin Group statement

  pg_pin ( string ) {
    voltage_name : string ;
    pg_type : string ; // primary_power | primary_ground |
                       // backup_power | backup_ground |
		       // internal_power | internal_ground
  }

- routing_track Group statement

  routing_track ( string ) {
    tracks : integer ;
    total_track_area : float ;
    short ? complex attribute だが一切の記述なし
    /* for model group only */ とだけ書かれている．
  }

- statetable Group statement

  statetable ( string, string ) {
    table : string ;
  }

  ヘッダの2つの文字列はそれぞれ
  input_node_names, internal_node_names
  を表す．例では複数のピン名を空白なしで連結しているように見える．

  table は 2つの ':' で区切られた複数行からなる文字列で一行が
  " input_node_values : current_internal_values : next_internal_values "
  を表す．

  センスのない構文．複雑なことを全部文字列の中に押し込めて構文としてな
  んにもしていない．

- test_cell Group statement

  test_cell () {
    ff ( string, string ) { }
    ff_bank ( string, string, integer ) { }
    latch ( string, string ) { }
    latch_bank ( string, string, integer ) { }
    pin ( string, .. ) { }
    statetable ( string, string ) { }
  }

  test_cell 内の pin Group では

  signal_type simple attribute を持つ場合がある．

  signal_type : test_scan_in | test_scan_in_inverted |
                test_scan_out | test_scan_out_inverted |
		test_scan_enable | test_scan_enable_inverted |
		test_scan_clock | test_scan_clock_a |
                test_scan_clock_b | test_clock ;

  こちらも test_cell 内の pin group で使用可能な simple attribute
  test_output_only : true | false ;

- type Group statement

  type ( string ) {
    base_type : string ; // array
    bit_from : integer ;
    bit_to : integer ;
    bit_width : integer ;
    data_type : string ; // bit
    downto : true | false ;
  }

- model Group statement

  model ( string ) {
  }

  cell Group と同一の属性を持つ．
  model Group 固有の属性は以下の通り

  cell_name : string ;
  short ( "name_list_(string)" ) ;

  凡例では上のように書いてあるが，実際の例では
  short ( b, y ) ;
  なので short ( string, string, ... ) ; が正しいと思われる．

- pin Group statement

  pin ( string, string, ... ) {
    bit_width : integer ;
    capacitance : float ;
    clock : true | false ;
    clock_gate_clock_pin : true | false ;
    clock_gate_enable_pin : true | false ;
    clock_gate_test_pin : true | false ;
    clock_gate_obs_pin : true | false ;
    clock_gate_out_pin : true | false ;
    complementary_pin : string ;
    connection_class : string ;
    direction : input | output | inout | internal ;
    dont_fault : sa0 | sa1 | sa01 ;
    drive_current : float ;
    driver_type : pull_up | pull_down | open_drain | open_source |
                  bus_hold | resistive | resistive_0 | resistive_1 ;
    fall_capacitance : float ;
    fall_current_slope_after_threshold : float ;
    fall_current_slope_before_threshold : float ;
    fall_time_after_threshold : float ;
    fall_time_before_threshold : float ;
    fanout_load : float ;
    fault_model "two-value string" ; //[01x][01x]
    function : "Boolean expression" ;
    has_builtin_pad : true | false ;
    hysteresis : true | false ;
    input_map : name_(id) ; 空白で区切られた入力ピン名のリスト
    input_signal_level : name_(id) ;
    input_threshold_pct_fall : float ;
    input_threshold_pct_rise : float ;
    input_voltage : name_(id) ;
    internal_node : pin_name_(id) ;
    inverted_output : true | false ;
    is_pad : true | false ;
    isolation_cell_enable_pin : true | false ;
    level_shifter_enable_pin : true | false ;
    map_to_logic : 1 | 0 ; // なんでこれが Boolean expression なの？
    max_capacitance : float ;
    max_fanout : float ;
    max_input_noise_width : float ;
    max_transition : float ;
    min_capacitance : float ;
    min_fanout : float ;
    min_input_noise_width : float ;
    min_period : float ;
    min_pulse_width_high : float ;
    min_pulse_width_low : float ;
    min_transition : float ;
    multicell_pad_pin : true | false ;
    nextstate_type : data | preset | clear | load | scan_in | scan_enable ;
    output_signal_level : name_(id) ;
    output_voltage : name_(id) ;
    pg_function : "<function_string>" ; ?? たぶん "Boolean expression"
    pin_func_type : clock_enable | active_high | active_low |
                     active_rising | active_falling ;
    power_down_function : "<function string>" ; たぶん "Boolean expression"
    prefer_tied : "0" | "1" ;
    primary_output : true | false ;
    pulling_current : float ; // マニュアルには正確な記述なし．
    pulling_resistance : float ;
    pulse_clock : rise_triggered_high_pulse |
                  rise_triggered_low_pulse |
                  fall_triggered_high_pulse |
                  fall_triggered_low_pulse ;
    related_ground_pin : pg_pin_name_(id) ;
    related_power_pin : pg_pin_name_(id) ;
    rise_capacitance : float ;
    rise_current_slope_after_threshold : float ;
    rise_current_slope_before_threshold : float ;
    rise_time_after_threshold : float ;
    rise_time_before_threshold : float ;
    signal_type : test_scan_in | test_scan_in_inverted |
                  test_scan_out | test_scan_out_inverted |
                  test_scan_enable | test_scan_enable_inverted |
                  test_scan_clock | test_scan_clock_a |
                  test_scan_clock_b | test_clock ;
    slew_control : low | medium | high | none ;
    slew_lower_threshold_pct_fall : float ;
    slew_lower_threshold_pct_rise : float ;
    slew_upper_threshold_pct_fall : float ;
    slew_upper_threshold_pct_rise : falot ;
    state_function : "Boolean expression" ;
    std_cell_main_rail : true | false ;
    switch_function : function_string ; // "Boolean expression" のこと？
    switch_pin : true | false ;
    test_output_only : true | false ;
    three_state : "Boolean expression" ;
    vhdl_name : "name_(string)" ;
    x_function : "Boolean expression" ;

    fall_capacitance_range : (value_1_(float), value_2_(float)) ;
    power_gating_pin : (value_1_(enum), value2_(Boolean)) ;
                         たぶん value_1 は string, value2 は integer
    rise_capacitance_range : (value_1_(float), value_2(float)) ;

    ccsn_first_stage () { ... }
    ccsn_last_stage () { ... }
    dc_current () { ... }
    electromigration () { ... }
    hyperbolic_noise_above_high () { ... }
    hyperbolic_noise_below_low () { ... }
    hyperbolic_noise_high () { ... }
    hyperbolic_noise_low () { ... }
    input_signal_swing () { ... }
    internal_power() { ... }
    max_capacitance () { ... }
    max_transition () { ... }
    min_pulse_width () { ... }
    minimum_period () { ... }
    output_signal_swing () { ... }
    pin_capacitance () { ... }
    timing () { ... }
    tlatch () { ... }
  }

- ccsn_{first|last}_stage Group statement

  ccsn_first_sgate () {
    is_needed : true | false ;
    is_inverting : true | false ;
    miller_cap_rise : float ;
    miller_cap_fall : float ;
    stage_type : string ; // pull_up | pull_down
    when : "Boolean expression" ;

    dc_current ( string ) {
      index_1 ( "float, float, ... " ) ;
      index_2 ( "float, float, ... " ) ;
      values ( 例のやつ ) ;
    }

    output_voltage_{rise|fall} () {
      vector ( string ) {
        index_1 ( float ) ; // ?
	index_2 ( float ) ; // ?
	index_3 ( "float, float, ... " ) ;
	values ( 例のやつ ) ;
      }
    }

    propagated_noise_{low|high} () {
      vector ( string ) {
        index_1 ( float ) ; // ?
	index_2 ( float ) ; // ?
	index_3 ( float ) ; // ?
	index_4 ( "float, float, ... " ) ;
	values ( 例のやつ ) ;
      }
    }
  }

- electromigration Group statement

  electromigration () {
    related_pin : string ; // 空白で区切られたピン名のリスト
    related_bus_pins : string ; // 空白で区切られたピン名のリスト
    when : "Boolen expression" ;
    index_1 ( "float, float, ... " ) ; // optional
    index_2 ( "float, float, ... " ) ; // optional
    values ( 例のやつ ) ;
    em_max_toggle_rate ( string ) {
      // lcrm1_3 に記述なし
    }
  }

- hyperbolic_noise_{above_high|below_low|high|low} Group statement

  hyperbolic_noise_above_high () {
    area_coefficient : float ;
    height_coefficient : float ;
    width_coefficient : float ;
  }

- internal_power Group statement

  internal_power () {
    equal_or_opposite_output : string ; // 空白で区切られたピン名のリスト
    falling_together_group : string ;  // 空白で区切られたピン名のリスト
    power_level : string ;
    related_pin : string ;  // 空白で区切られたピン名のリスト
    rising_together_group : string ;  // 空白で区切られたピン名のリスト
    switching_interval : float ;
    switching_together_group : string ;  // 空白で区切られたピン名のリスト
    when : "Boolean expression" ;
    domain ( string ) { }
    fall_power ( string ) { }
    power ( string ) { }
    rise_power ( string ) { }
  }

  power, fall_power, rise_power グループは table グループ

- {max|min}_capacitance Group statement (lcrm中では max_cap ?)

  max_capacitance ( string ) { // template 名
    // table attributes
  }

- {max|min}_transition Group statement

  max_transition ( string ) { // template 名
    // table attributes
  }

- min_pulse_width Group statement

  min_pulse_width () {
    constraint_high : float ;
    constraint_low : float ;
    when : "Boolean expression" ;
    sdf_cond : string ; "SDFの書式のブール式"
  }

- minimum_period Group statement

  minimum_period () {
    constraint : float ;
    when : "Boolean expression" ;
    sdf_cond : string ;
  }

- pin_capacitance Group statement

  pin_capacitance () {
    capacitance () { }
    rise_capacitance () { }
    fall_capacitance () { }
    rise_capacitance_range() { } // optional, unique
    fall_capacitance_range() { } // optional, uniquen
  }

  capacitance, rise_capacitance, fall_capacitance は table グループ
  例では orders, coefs を用いている．

- {rise|fall}_capacitance_range Group statement

  rise_capacitance_range () {
    lower ( string ) { } // required, unique
    upper ( string ) { } // required, unique
  }

  lower, upper は poly template table グループ

    variable_n_range
    orders
    coefs
    domain

- receiver_capacitance Group statement

  receiver_capacitance () {
    receiver_capacitance1_fall() { }
    receiver_capacitance1_rise() { }
    receiver_capacitance2_fall() { }
    receiver_capacitance2_rise() { }
  }

  4つのグループは lu_tamplate_name を引数にとり
  values 属性を持つ．

- tlatch Group statment

  tlatch ( string ) {
    edge_type : string ; // rising | falling
    tdisable : TRUE | FALSE ; // true | false じゃないの？
  }


- timing Group statement

  timing ( string ) { // string は optional
    clock_gating_flag : true | false ;
    default_timing : true | false ;
    fall_resistance : float ;
    fpga_arc_condition : "Boolean expression" ;
    fpga_domain_style : string ;
    interdependence_id : integer ;
    intrinsic_fall : float ;
    intrinsic_rise : float ;
    related_bus_equivalent : "name1 [name2 name3 ...]" ;
    related_bus_pins : "name1 [name2 name3 ...]" ;
    related_output_pin : string ;
    related_pin : "name1 [name2 name3 ..]" ;
    rise_resistance : float ;
    sdf_conf : "SDF expression" ;
    sdf_cond_end : "SDF expression" ;
    sdf_cond_start : "SDF expression" ;
    sdf_edges : SDF edge type ; // noedge | start_edge | end_edge | both_edge
    slope_fall : float ;
    slope_rise : float ;
    steady_state_resistance_above_high : float ;
    steady_state_resistance_below_low : float ;
    steady_state_resistance_high : float ;
    steady_state_resistance_low : float ;
    tied_off : true | false ;
    timing_sense : positive_unate | negative_unate | non_unate ;
    timing_type : <timing type> ;
    wave_fall_sampling_index : integer ;
    wave_rise_sampling_index : integer ;
    when : "Boolean expression" ;
    when_end : "Boolean expression" ;
    when_start : "Boolean expression" ;

    fall_delay_intercept ( integer, float ) ; // 複数あり
    fall_pin_resistance ( integer, float ) ;  // 複数あり
    mode ( string, string ) ;
    pin_name_map ( string, string, ... ) ;
    rise_delay_intercept ( integer, float ) ; // 複数あり
    rise_pin_resistance ( integer, float ) ; // 複数あり
    wave_fall ( integer, integer, ... ) ;
    wave_rise ( integer, integer, ... ) ;
    wave_fall_time_interval ( float, float, ... ) ;
    wave_rise_time_interval ( float, float, ... ) ;

    cell_degradation () { ... }
    cell_fall () { ... }
    cell_rise () { ... }
    fall_constraint () { ... }
    fall_propagation () { ... }
    fall_transition () { ... }
    noise_immunity_above_high () { ... }
    noise_immunity_below_low () { ... }
    noise_immunity_high () { ... }
    noise_immunity_low () { ... }
    output_current_fall () { ... }
    output_current_rise () { ... }
    propagated_noise_height_above_high () { ... }
    propagated_noise_height_below_low() { ... }
    propagated_noise_height_high() { ... }
    propagated_noise_height_low() { ... }
    propagated_noise_peak_time_ratio_above_high() { ... }
    propagated_noise_peak_time_ratio_below_low() { ... }
    propagated_noise_peak_time_ratio_high() { ... }
    propagated_noise_peak_time_ratio_low() { ... }
    propagated_noise_width_above_high() { ... }
    propagated_noise_width_below_low() { ... }
    propagated_noise_width_high() { ... }
    propagated_noise_width_low() { ... }
    receiver_capacitance1_fall() { ... }
    receiver_capacitance1_rise() { ... }
    receiver_capacitance2_fall() { ... }
    receiver_capacitance2_rise() { ... }
    retaining_fall () { ... }
    retaining_rise () { ... }
    retain_fall_slew () { ... }
    retain_rise_slew () { ... }
    rise_constraint () { ... }
    rise_propagation () { ... }
    rise_transition () { ... }
    steady_state_current_high () { ... }
    steady_state_current_low () { ... }
    steady_state_current_tristate () { ... }
  }

- cell_degradation Group statement

  cell_degradation ( string ) {
    index_1 ( "float, float, ... " ) ;
    values ( ... ) ;
    coefs ( ) ;
    orders ( ) ;
    variable_n_range ( ) ;
    domain () { }
  }

  普通の table グループ

- cell_{fall|rise} Group statement

  cell_fall ( string ) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- compact_ccs_{fall|rise} Group statement

  compact_ccs_fall (string ) {
    vase_curves_group : string ;
    values ( ... ) ;
  }

- {fall|rise}_constraint Group statement

  fall_constraint (string) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- {fall|rise}_propagation Group satement

  fall_propagation (string) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- {fall|rise}_transition Group statement

  fall_transition (string) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    intermediate_values ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループに intermediate_values 属性が追加されている．

- noise_immunity_{above_high|below_low|high|low} Group statement

  noise_immunity_above_high (string) {
    coefs ( ... ) ;
    orders ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- output_current_{fall|rise} Group statement

  output_current_fall (string) {
    vector () {
      reference_time : float ;
      index_1 ( ... ) ;
      index_2 ( ... ) ;
      index_3 ( ... ) ;
      values ( ... ) ;
    }
  }

  vector グループは普通の table グループに reference_time 属性が追加さ
  れたもの

- propagated_noise_height_{above_high|below_low|high|low} Group statement

  propagated_noise_height_above_high ( string ) {
    coefs ( ... ) ;
    orders ( ... ) ;
    values ( ... ) ;
    domain ( ) { }
  }

  普通の table グループ

- propagated_noise_peak_time_ratio_{above_high|以下略} Group statement

  propagated_noise_peak_time_ratio_above_high ( string ) {
    coefs ( ... ) ;
    orders ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  propagated_noise_height_above_high と同様

- propagated_noise_width_{above_high|以下略} Group statement

  propagated_noise_width_above_high ( string ) {
    ...
  }

  propagated_noise_height_above_high と同様

- receiver_capacitance{1|2}_{fall|rise} Group statement

  receiver_capacitance1_fall ( string ) { // lcrm1-3 の例ではパラメータがない
    values ( ... ) ;
  }

- retaining_{fall|rise} Group statement

  retaining_fall ( string ) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- retain_{fall|rise}_slew Group statement

  retain_fall_slew (string) {
    values ( ... ) ;
  }

  retain_fall_slew (string) {
    orders ( ... ) ;
    coefs ( ... ) ;
    variable_n_range ( float, float ) ;
  }

  説明と例では明示されていないが普通の table グループ？

- steady_state_current_{high|low} Group statement

  steady_state_current_high ( string ) {
    coefs ( ... ) ;
    orders ( ... ) ;
    values ( ... ) ;
    domain () { }
  }

  普通の table グループ

- steady_state_current_tristate Group statement

  steady_state_current_tristate ( string ) {
    index_1 ( ... ) ;
    index_2 ( ... ) ;
    index_3 ( ... ) ;
    intermediate_values ( ... ) ;
    values ( ... ) ;
    coers ( ... ) ;
    orders ( ... ) ;
    domain () { }
  }

  普通の table グループに intermediate_values 属性を加えたもの

- pin_based_variation Group statement

  pin_based_variation () {
    va_parameters ( string, string, ... ) ;
    nominal_va_values ( float, float, ... ) ;
    va_compact_ccs_rise () { }
    va_compact_ccs_fall () { }
    va_receiver_capacitance1_fall () { }
    va_receiver_capacitance1_rise () { }
    va_receiver_capacitance2_fall () { }
    va_receiver_capacitance2_rise () { }
  }

  たぶん timing_based_variation と同じ

- timing_based_variation Group statement

  timing_based_variation () {
    va_parameters ( string, string, ... ) ;
    nominal_va_values ( float, float, ... ) ;
    va_compact_ccs_rise( string ) {
      va_values ( float, float, ... ) ;
      values ( "float, ...", "float, ... ", ... );
    }
    va_compact_ccs_fall ( ) { }
    va_receiver_capacitance1_fall () { }
    va_receiver_capacitance1_rise () { }
    va_receiver_capacitance2_fall () { }
    va_receiver_capacitance2_rise () { }
    va_rise_constraint () { }
    va_fall_constraint () { }
  }

  va_{fall|rise}_constraint は va_compact_ccs_rise と同じ
