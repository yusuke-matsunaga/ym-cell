
/// @file AttrDic.cc
/// @brief AttrDic の実装ファイル
/// @author Yusuke Matsunaga (松永 裕介)
///
/// Copyright (C) 2018 Yusuke Matsunaga
/// All rights reserved.


#include "dotlib/AttrDic.h"


BEGIN_NAMESPACE_YM_DOTLIB

//////////////////////////////////////////////////////////////////////
// クラス AttrDic
//////////////////////////////////////////////////////////////////////

// @brief コンストラクタ
AttrDic::AttrDic()
{
  // gen_attr_dic.py で作成
  mDic.add("area", AttrType::area);
  mDic.add("auxiliary_pad_cell", AttrType::auxiliary_pad_cell);
  mDic.add("base_name", AttrType::base_name);
  mDic.add("bit_width", AttrType::bit_width);
  mDic.add("bundle", AttrType::bundle);
  mDic.add("bus_naming_style", AttrType::bus_naming_style);
  mDic.add("bus_type", AttrType::bus_type);
  mDic.add("bus", AttrType::bus);
  mDic.add("calc_mode", AttrType::calc_mode);
  mDic.add("capacitance", AttrType::capacitance);
  mDic.add("capacitive_load_unit", AttrType::capacitive_load_unit);
  mDic.add("cell_degradation", AttrType::cell_degradation);
  mDic.add("cell_fall", AttrType::cell_fall);
  mDic.add("cell_footprint", AttrType::cell_footprint);
  mDic.add("cell_leakage_power", AttrType::cell_leakage_power);
  mDic.add("cell_rise", AttrType::cell_rise);
  mDic.add("cell", AttrType::cell);
  mDic.add("clear_preset_var1", AttrType::clear_preset_var1);
  mDic.add("clear_preset_var2", AttrType::clear_preset_var2);
  mDic.add("clear", AttrType::clear);
  mDic.add("clock_gate_clock_pin", AttrType::clock_gate_clock_pin);
  mDic.add("clock_gate_enable_pin", AttrType::clock_gate_enable_pin);
  mDic.add("clock_gate_test_pin", AttrType::clock_gate_test_pin);
  mDic.add("clock_gate_obs_pin", AttrType::clock_gate_obs_pin);
  mDic.add("clock_gate_out_pin", AttrType::clock_gate_out_pin);
  mDic.add("clock_gating_integrated_cell", AttrType::clock_GATING_INTEGRATED_cell);
  mDic.add("clock", AttrType::clock);
  mDic.add("clocked_on_also", AttrType::clockED_ON_ALSO);
  mDic.add("clocked_on", AttrType::clockED_ON);
  mDic.add("coefs", AttrType::coefs);
  mDic.add("comment", AttrType::comment);
  mDic.add("complementary_pin", AttrType::complementary_pin);
  mDic.add("connection_class", AttrType::connection_class);
  mDic.add("contention_condition", AttrType::contention_condition);
  mDic.add("current_unit", AttrType::current_unit);
  mDic.add("data_in", AttrType::data_in);
  mDic.add("date", AttrType::date);
  mDic.add("dc_current_template", AttrType::dc_current_template);
  mDic.add("default_cell_leakage_power", AttrType::DEFAULT_cell_leakage_power);
  mDic.add("default_connection_class", AttrType::DEFAULT_connection_class);
  mDic.add("default_fall_delay_intercept", AttrType::default_fall_delay_intercept);
  mDic.add("default_fall_pin_resistance", AttrType::default_fall_pin_resistance);
  mDic.add("default_fanout_load", AttrType::default_fanout_load);
  mDic.add("default_inout_pin_cap", AttrType::default_inout_pin_cap);
  mDic.add("default_inout_pin_fall_res", AttrType::default_inout_pin_fall_res);
  mDic.add("default_inout_pin_rise_res", AttrType::default_inout_pin_rise_res);
  mDic.add("default_input_pin_cap", AttrType::default_input_pin_cap);
  mDic.add("default_intrinsic_fall", AttrType::default_intrinsic_fall);
  mDic.add("default_intrinsic_rise", AttrType::default_intrinsic_rise);
  mDic.add("default_leakage_power_density", AttrType::default_leakage_power_density);
  mDic.add("default_max_capacitance", AttrType::DEFAULT_MAX_capacitance);
  mDic.add("default_max_fanout", AttrType::default_max_fanout);
  mDic.add("default_max_transition", AttrType::default_max_transition);
  mDic.add("default_max_utilization", AttrType::default_max_utilization);
  mDic.add("default_min_porosity", AttrType::default_min_porosity);
  mDic.add("default_operating_conditions", AttrType::default_operating_conditions);
  mDic.add("default_output_pin_cap", AttrType::default_output_pin_cap);
  mDic.add("default_output_pin_fall_res", AttrType::default_output_pin_fall_res);
  mDic.add("default_output_pin_rise_res", AttrType::default_output_pin_rise_res);
  mDic.add("default_part", AttrType::default_part);
  mDic.add("default_rise_delay_intercept", AttrType::default_rise_delay_intercept);
  mDic.add("default_rise_pin_resistance", AttrType::default_rise_pin_resistance);
  mDic.add("default_slope_fall", AttrType::default_slope_fall);
  mDic.add("default_slope_rise", AttrType::default_slope_rise);
  mDic.add("default_wire_load_area", AttrType::default_wire_load_area);
  mDic.add("default_wire_load_capacitance", AttrType::default_wire_load_capacitance);
  mDic.add("default_wire_load_mode", AttrType::default_wire_load_mode);
  mDic.add("default_wire_load_resistance", AttrType::default_wire_load_resistance);
  mDic.add("default_wire_load_selection", AttrType::default_wire_load_selection);
  mDic.add("default_wire_load", AttrType::default_wire_load);
  mDic.add("define_cell_area", AttrType::define_cell_area);
  mDic.add("define_group", AttrType::define_group);
  mDic.add("define", AttrType::define);
  mDic.add("delay_model", AttrType::delay_model);
  mDic.add("direction", AttrType::direction);
  mDic.add("domain", AttrType::domain);
  mDic.add("dont_fault", AttrType::dont_fault);
  mDic.add("dont_touch", AttrType::dont_touch);
  mDic.add("dont_use", AttrType::dont_use);
  mDic.add("drive_current", AttrType::drive_current);
  mDic.add("driver_type", AttrType::driver_type);
  mDic.add("dynamic_current", AttrType::dynamic_current);
  mDic.add("edge_rate_sensitivity_f0", AttrType::edge_rate_sensitivity_f0);
  mDic.add("edge_rate_sensitivity_f1", AttrType::edge_rate_sensitivity_f1);
  mDic.add("edge_rate_sensitivity_r0", AttrType::edge_rate_sensitivity_r0);
  mDic.add("edge_rate_sensitivity_r1", AttrType::edge_rate_sensitivity_r1);
  mDic.add("edif_name", AttrType::edif_name);
  mDic.add("electromigration", AttrType::electromigration);
  mDic.add("em_lut_template", AttrType::em_lut_template);
  mDic.add("em_temp_degradation_factor", AttrType::em_temp_degradation_factor);
  mDic.add("enable_also", AttrType::enable_also);
  mDic.add("enable", AttrType::enable);
  mDic.add("equal_or_opposite_output", AttrType::equal_or_opposite_output);
  mDic.add("fall_capacitance_range", AttrType::FALL_capacitance_RANGE);
  mDic.add("fall_capacitance", AttrType::FALL_capacitance);
  mDic.add("fall_constraint", AttrType::fall_constraint);
  mDic.add("fall_current_slope_after_threshold", AttrType::fall_current_slope_after_threshold);
  mDic.add("fall_current_slope_before_threshold", AttrType::fall_current_slope_before_threshold);
  mDic.add("fall_delay_intercept", AttrType::fall_delay_intercept);
  mDic.add("fall_pin_resistance", AttrType::fall_pin_resistance);
  mDic.add("fall_power", AttrType::fall_power);
  mDic.add("fall_propagation", AttrType::fall_propagation);
  mDic.add("fall_resistance", AttrType::fall_resistance);
  mDic.add("fall_time_after_threshold", AttrType::fall_time_after_threshold);
  mDic.add("fall_time_before_threshold", AttrType::fall_time_before_threshold);
  mDic.add("fall_transition_degradation", AttrType::fall_transition_degradation);
  mDic.add("fall_transition", AttrType::fall_transition);
  mDic.add("falling_together_group", AttrType::falling_together_group);
  mDic.add("fanout_area", AttrType::FANOUT_area);
  mDic.add("fanout_capacitance", AttrType::FANOUT_capacitance);
  mDic.add("fanout_length", AttrType::fanout_length);
  mDic.add("fanout_load", AttrType::fanout_load);
  mDic.add("fanout_resistance", AttrType::fanout_resistance);
  mDic.add("fault_model", AttrType::fault_model);
  mDic.add("faults_lut_template", AttrType::faults_lut_template);
  mDic.add("ff_bank", AttrType::ff_bank);
  mDic.add("ff", AttrType::ff);
  mDic.add("fpga_domain_style", AttrType::FPGA_domain_STYLE);
  mDic.add("fpga_technology", AttrType::fpga_technology);
  mDic.add("function", AttrType::function);
  mDic.add("functional_yield_metric", AttrType::functionAL_YIELD_METRIC);
  mDic.add("generated_clock", AttrType::GENERATED_clock);
  mDic.add("geometry_print", AttrType::geometry_print);
  mDic.add("handle_negative_constraint", AttrType::handle_negative_constraint);
  mDic.add("has_builtin_pad", AttrType::has_builtin_pad);
  mDic.add("hyperbolic_noise_above_high", AttrType::hyperbolic_noise_above_high);
  mDic.add("hyperbolic_noise_below_low", AttrType::hyperbolic_noise_below_low);
  mDic.add("hyperbolic_noise_high", AttrType::hyperbolic_noise_high);
  mDic.add("hyperbolic_noise_low", AttrType::hyperbolic_noise_low);
  mDic.add("hysteresis", AttrType::hysteresis);
  mDic.add("in_place_swap_mode", AttrType::in_place_swap_mode);
  mDic.add("index_1", AttrType::index_1);
  mDic.add("index_2", AttrType::index_2);
  mDic.add("index_3", AttrType::index_3);
  mDic.add("input_map", AttrType::input_map);
  mDic.add("input_signal_level", AttrType::input_signal_level);
  mDic.add("input_threshold_pct_fall", AttrType::input_threshold_pct_fall);
  mDic.add("input_threshold_pct_rise", AttrType::input_threshold_pct_rise);
  mDic.add("input_voltage", AttrType::input_voltage);
  mDic.add("interface_timing", AttrType::interface_timing);
  mDic.add("internal_node", AttrType::internal_node);
  mDic.add("internal_power", AttrType::internal_power);
  mDic.add("intrinsic_fall", AttrType::intrinsic_fall);
  mDic.add("intrinsic_parasitic", AttrType::intrinsic_parasitic);
  mDic.add("intrinsic_rise", AttrType::intrinsic_rise);
  mDic.add("inverted_output", AttrType::inverted_output);
  mDic.add("io_type", AttrType::io_type);
  mDic.add("is_clock_gating_cell", AttrType::IS_clock_GATING_cell);
  mDic.add("is_filler_cell", AttrType::IS_FILLER_cell);
  mDic.add("is_pad", AttrType::is_pad);
  mDic.add("iv_lut_template", AttrType::iv_lut_template);
  mDic.add("k_process_cell_fall", AttrType::K_process_cell_fall);
  mDic.add("k_process_cell_leakage_power", AttrType::K_process_cell_leakage_power);
  mDic.add("k_process_cell_rise", AttrType::K_process_cell_rise);
  mDic.add("k_process_drive_current", AttrType::K_process_drive_current);
  mDic.add("k_process_drive_fall", AttrType::k_process_drive_fall);
  mDic.add("k_process_drive_rise", AttrType::k_process_drive_rise);
  mDic.add("k_process_fall_delay_intercept", AttrType::K_process_fall_delay_intercept);
  mDic.add("k_process_fall_pin_resistance", AttrType::K_process_fall_pin_resistance);
  mDic.add("k_process_fall_propagation", AttrType::K_process_fall_propagation);
  mDic.add("k_process_fall_transition", AttrType::K_process_fall_transition);
  mDic.add("k_process_hold_fall", AttrType::k_process_hold_fall);
  mDic.add("k_process_hold_rise", AttrType::k_process_hold_rise);
  mDic.add("k_process_internal_power", AttrType::K_process_internal_power);
  mDic.add("k_process_intrinsic_fall", AttrType::K_process_intrinsic_fall);
  mDic.add("k_process_intrinsic_rise", AttrType::K_process_intrinsic_rise);
  mDic.add("k_process_min_period", AttrType::k_process_min_period);
  mDic.add("k_process_min_pulse_width_high", AttrType::k_process_min_pulse_width_high);
  mDic.add("k_process_min_pulse_width_low", AttrType::k_process_min_pulse_width_low);
  mDic.add("k_process_nochange_fall", AttrType::k_process_nochange_fall);
  mDic.add("k_process_nochange_rise", AttrType::k_process_nochange_rise);
  mDic.add("k_process_pin_cap", AttrType::k_process_pin_cap);
  mDic.add("k_process_recovery_fall", AttrType::k_process_recovery_fall);
  mDic.add("k_process_recovery_rise", AttrType::k_process_recovery_rise);
  mDic.add("k_process_removal_fall", AttrType::k_process_removal_fall);
  mDic.add("k_process_removal_rise", AttrType::k_process_removal_rise);
  mDic.add("k_process_rise_transition", AttrType::k_process_rise_transition);
  mDic.add("k_process_rise_delay_intercept", AttrType::k_process_rise_delay_intercept);
  mDic.add("k_process_rise_pin_resistance", AttrType::k_process_rise_pin_resistance);
  mDic.add("k_process_rise_propagation", AttrType::k_process_rise_propagation);
  mDic.add("k_process_setup_fall", AttrType::k_process_setup_fall);
  mDic.add("k_process_setup_rise", AttrType::k_process_setup_rise);
  mDic.add("k_process_skew_fall", AttrType::k_process_skew_fall);
  mDic.add("k_process_skew_rise", AttrType::k_process_skew_rise);
  mDic.add("k_process_slope_fall", AttrType::k_process_slope_fall);
  mDic.add("k_process_slope_rise", AttrType::k_process_slope_rise);
  mDic.add("k_process_wire_cap", AttrType::k_process_wire_cap);
  mDic.add("k_process_wire_res", AttrType::k_process_wire_res);
  mDic.add("k_temp_cell_fall", AttrType::K_TEMP_cell_fall);
  mDic.add("k_temp_cell_leakage_power", AttrType::K_TEMP_cell_leakage_power);
  mDic.add("k_temp_cell_rise", AttrType::K_TEMP_cell_rise);
  mDic.add("k_temp_drive_current", AttrType::K_TEMP_drive_current);
  mDic.add("k_temp_drive_fall", AttrType::k_temp_drive_fall);
  mDic.add("k_temp_drive_rise", AttrType::k_temp_drive_rise);
  mDic.add("k_temp_fall_delay_intercept", AttrType::K_TEMP_fall_delay_intercept);
  mDic.add("k_temp_fall_pin_resistance", AttrType::K_TEMP_fall_pin_resistance);
  mDic.add("k_temp_fall_propagation", AttrType::K_TEMP_fall_propagation);
  mDic.add("k_temp_fall_transition", AttrType::K_TEMP_fall_transition);
  mDic.add("k_temp_hold_fall", AttrType::k_temp_hold_fall);
  mDic.add("k_temp_hold_rise", AttrType::k_temp_hold_rise);
  mDic.add("k_temp_internal_power", AttrType::K_TEMP_internal_power);
  mDic.add("k_temp_intrinsic_fall", AttrType::K_TEMP_intrinsic_fall);
  mDic.add("k_temp_intrinsic_rise", AttrType::K_TEMP_intrinsic_rise);
  mDic.add("k_temp_min_period", AttrType::k_temp_min_period);
  mDic.add("k_temp_min_pulse_width_high", AttrType::k_temp_min_pulse_width_high);
  mDic.add("k_temp_min_pulse_width_low", AttrType::k_temp_min_pulse_width_low);
  mDic.add("k_temp_nochange_fall", AttrType::k_temp_nochange_fall);
  mDic.add("k_temp_nochange_rise", AttrType::k_temp_nochange_rise);
  mDic.add("k_temp_pin_cap", AttrType::k_temp_pin_cap);
  mDic.add("k_temp_recovery_fall", AttrType::k_temp_recovery_fall);
  mDic.add("k_temp_recovery_rise", AttrType::k_temp_recovery_rise);
  mDic.add("k_temp_removal_fall", AttrType::k_temp_removal_fall);
  mDic.add("k_temp_removal_rise", AttrType::k_temp_removal_rise);
  mDic.add("k_temp_rise_transition", AttrType::k_temp_rise_transition);
  mDic.add("k_temp_rise_delay_intercept", AttrType::k_temp_rise_delay_intercept);
  mDic.add("k_temp_rise_pin_resistance", AttrType::k_temp_rise_pin_resistance);
  mDic.add("k_temp_rise_propagation", AttrType::k_temp_rise_propagation);
  mDic.add("k_temp_setup_fall", AttrType::k_temp_setup_fall);
  mDic.add("k_temp_setup_rise", AttrType::k_temp_setup_rise);
  mDic.add("k_temp_skew_fall", AttrType::k_temp_skew_fall);
  mDic.add("k_temp_skew_rise", AttrType::k_temp_skew_rise);
  mDic.add("k_temp_slope_fall", AttrType::k_temp_slope_fall);
  mDic.add("k_temp_slope_rise", AttrType::k_temp_slope_rise);
  mDic.add("k_temp_wire_cap", AttrType::k_temp_wire_cap);
  mDic.add("k_temp_wire_res", AttrType::k_temp_wire_res);
  mDic.add("k_volt_cell_fall", AttrType::K_volT_cell_fall);
  mDic.add("k_volt_cell_leakage_power", AttrType::K_volT_cell_leakage_power);
  mDic.add("k_volt_cell_rise", AttrType::K_volT_cell_rise);
  mDic.add("k_volt_drive_current", AttrType::K_volT_drive_current);
  mDic.add("k_volt_drive_fall", AttrType::k_volt_drive_fall);
  mDic.add("k_volt_drive_rise", AttrType::k_volt_drive_rise);
  mDic.add("k_volt_fall_delay_intercept", AttrType::K_volT_fall_delay_intercept);
  mDic.add("k_volt_fall_pin_resistance", AttrType::K_volT_fall_pin_resistance);
  mDic.add("k_volt_fall_propagation", AttrType::K_volT_fall_propagation);
  mDic.add("k_volt_fall_transition", AttrType::K_volT_fall_transition);
  mDic.add("k_volt_hold_fall", AttrType::k_volt_hold_fall);
  mDic.add("k_volt_hold_rise", AttrType::k_volt_hold_rise);
  mDic.add("k_volt_internal_power", AttrType::K_volT_internal_power);
  mDic.add("k_volt_intrinsic_fall", AttrType::K_volT_intrinsic_fall);
  mDic.add("k_volt_intrinsic_rise", AttrType::K_volT_intrinsic_rise);
  mDic.add("k_volt_min_period", AttrType::k_volt_min_period);
  mDic.add("k_volt_min_pulse_width_high", AttrType::k_volt_min_pulse_width_high);
  mDic.add("k_volt_min_pulse_width_low", AttrType::k_volt_min_pulse_width_low);
  mDic.add("k_volt_nochange_fall", AttrType::k_volt_nochange_fall);
  mDic.add("k_volt_nochange_rise", AttrType::k_volt_nochange_rise);
  mDic.add("k_volt_pin_cap", AttrType::k_volt_pin_cap);
  mDic.add("k_volt_recovery_fall", AttrType::k_volt_recovery_fall);
  mDic.add("k_volt_recovery_rise", AttrType::k_volt_recovery_rise);
  mDic.add("k_volt_removal_fall", AttrType::k_volt_removal_fall);
  mDic.add("k_volt_removal_rise", AttrType::k_volt_removal_rise);
  mDic.add("k_volt_rise_transition", AttrType::k_volt_rise_transition);
  mDic.add("k_volt_rise_delay_intercept", AttrType::k_volt_rise_delay_intercept);
  mDic.add("k_volt_rise_pin_resistance", AttrType::k_volt_rise_pin_resistance);
  mDic.add("k_volt_rise_propagation", AttrType::k_volt_rise_propagation);
  mDic.add("k_volt_setup_fall", AttrType::k_volt_setup_fall);
  mDic.add("k_volt_setup_rise", AttrType::k_volt_setup_rise);
  mDic.add("k_volt_skew_fall", AttrType::k_volt_skew_fall);
  mDic.add("k_volt_skew_rise", AttrType::k_volt_skew_rise);
  mDic.add("k_volt_slope_fall", AttrType::k_volt_slope_fall);
  mDic.add("k_volt_slope_rise", AttrType::k_volt_slope_rise);
  mDic.add("k_volt_wire_cap", AttrType::k_volt_wire_cap);
  mDic.add("k_volt_wire_res", AttrType::k_volt_wire_res);
  mDic.add("latch_bank", AttrType::latch_bank);
  mDic.add("latch", AttrType::latch);
  mDic.add("leakage_current", AttrType::leakage_current);
  mDic.add("leakage_power_unit", AttrType::leakage_power_unit);
  mDic.add("leakage_power", AttrType::leakage_power);
  mDic.add("library_features", AttrType::library_features);
  mDic.add("library", AttrType::library);
  mDic.add("lu_table_template", AttrType::lu_table_template);
  mDic.add("lut", AttrType::lut);
  mDic.add("map_only", AttrType::map_only);
  mDic.add("max_capacitance", AttrType::MAX_capacitance);
  mDic.add("max_fanout", AttrType::max_fanout);
  mDic.add("max_input_noise_width", AttrType::max_input_noise_width);
  mDic.add("max_trans", AttrType::max_trans);
  mDic.add("max_transition", AttrType::max_transITION);
  mDic.add("members", AttrType::members);
  mDic.add("min_capacitance", AttrType::MIN_capacitance);
  mDic.add("min_fanout", AttrType::min_fanout);
  mDic.add("min_input_noise_width", AttrType::min_input_noise_width);
  mDic.add("min_period", AttrType::min_period);
  mDic.add("min_pulse_width_high", AttrType::min_pulse_width_high);
  mDic.add("min_pulse_width_low", AttrType::min_pulse_width_low);
  mDic.add("min_pulse_width", AttrType::min_pulse_width);
  mDic.add("min_transition", AttrType::min_transition);
  mDic.add("minimum_period", AttrType::minimum_period);
  mDic.add("mode_definition", AttrType::mode_definition);
  mDic.add("multicell_pad_pin", AttrType::MULTIcell_PAD_pin);
  mDic.add("next_state", AttrType::next_state);
  mDic.add("nextstate_type", AttrType::nextstate_type);
  mDic.add("noise_immunity_above_high", AttrType::noise_immunity_above_high);
  mDic.add("noise_immunity_below_low", AttrType::noise_immunity_below_low);
  mDic.add("noise_immunity_high", AttrType::noise_immunity_high);
  mDic.add("noise_immunity_low", AttrType::noise_immunity_low);
  mDic.add("noise_lut_template", AttrType::NOISE_lut_TEMPLATE);
  mDic.add("nom_calc_mode", AttrType::NOM_calc_mode);
  mDic.add("nom_process", AttrType::nom_process);
  mDic.add("nom_temperature", AttrType::nom_temperature);
  mDic.add("nom_voltage", AttrType::nom_voltage);
  mDic.add("operating_conditions", AttrType::operating_conditions);
  mDic.add("orders", AttrType::orders);
  mDic.add("output_current_template", AttrType::output_current_template);
  mDic.add("output_signal_level", AttrType::output_signal_level);
  mDic.add("output_threshold_pct_fall", AttrType::output_threshold_pct_fall);
  mDic.add("output_threshold_pct_rise", AttrType::output_threshold_pct_rise);
  mDic.add("output_voltage", AttrType::output_voltage);
  mDic.add("pad_cell", AttrType::PAD_cell);
  mDic.add("pad_type", AttrType::pad_type);
  mDic.add("parameter1", AttrType::parameter1);
  mDic.add("parameter2", AttrType::parameter2);
  mDic.add("parameter3", AttrType::parameter3);
  mDic.add("parameter4", AttrType::parameter4);
  mDic.add("parameter5", AttrType::parameter5);
  mDic.add("part", AttrType::part);
  mDic.add("piece_define", AttrType::PIECE_define);
  mDic.add("piece_type", AttrType::piece_type);
  mDic.add("pin_func_type", AttrType::pin_func_type);
  mDic.add("pin_opposite", AttrType::pin_opposite);
  mDic.add("pin", AttrType::pin);
  mDic.add("poly_template", AttrType::poly_template);
  mDic.add("power_cell_type", AttrType::power_cell_type);
  mDic.add("power_level", AttrType::power_level);
  mDic.add("power_lut_template", AttrType::power_lut_TEMPLATE);
  mDic.add("power_poly_template", AttrType::power_poly_template);
  mDic.add("power_model", AttrType::power_model);
  mDic.add("power_rail", AttrType::power_rail);
  mDic.add("power_supply_namestring", AttrType::power_supply_namestring);
  mDic.add("power_supply", AttrType::power_supply);
  mDic.add("power", AttrType::power);
  mDic.add("prefer_tied", AttrType::prefer_tied);
  mDic.add("preferred", AttrType::preferred);
  mDic.add("preferred_input_pad_voltage", AttrType::preferred_INPUT_PAD_volTAGE);
  mDic.add("preferred_output_pad_slew_rate_control", AttrType::preferred_OUTPUT_PAD_SLEW_RATE_CONTROL);
  mDic.add("preferred_output_pad_voltage", AttrType::preferred_OUTPUT_PAD_volTAGE);
  mDic.add("preset", AttrType::preset);
  mDic.add("primary_output", AttrType::primary_output);
  mDic.add("process", AttrType::process);
  mDic.add("propagated_noise_height_above_high", AttrType::propagated_noise_height_above_high);
  mDic.add("propagated_noise_height_below_low", AttrType::propagated_noise_height_below_low);
  mDic.add("propagated_noise_height_high", AttrType::propagated_noise_height_high);
  mDic.add("propagated_noise_height_low", AttrType::propagated_noise_height_low);
  mDic.add("propagated_noise_peak_time_ratio_above_high", AttrType::propagated_noise_peak_time_ratio_above_high);
  mDic.add("propagated_noise_peak_time_ratio_below_low", AttrType::propagated_noise_peak_time_ratio_below_low);
  mDic.add("propagated_noise_peak_time_ratio_high", AttrType::propagated_noise_peak_time_ratio_high);
  mDic.add("propagated_noise_peak_time_ratio_low", AttrType::propagated_noise_peak_time_ratio_low);
  mDic.add("propagated_noise_width_above_high", AttrType::propagated_noise_width_above_high);
  mDic.add("propagated_noise_width_below_low", AttrType::propagated_noise_width_below_low);
  mDic.add("propagated_noise_width_high", AttrType::propagated_noise_width_high);
  mDic.add("propagated_noise_width_low", AttrType::propagated_noise_width_low);
  mDic.add("propagation_lut_template", AttrType::PROPAGATION_lut_TEMPLATE);
  mDic.add("pulling_current", AttrType::pulling_current);
  mDic.add("pulling_resistance_unit", AttrType::pulling_resistance_unit);
  mDic.add("pulling_resistance", AttrType::pulling_resistance);
  mDic.add("rail_connection", AttrType::rail_connection);
  mDic.add("related_bus_equivalent", AttrType::RELATED_bus_EQUIVALENT);
  mDic.add("related_bus_pins", AttrType::RELATED_bus_pinS);
  mDic.add("related_inputs", AttrType::related_inputs);
  mDic.add("related_output_pin", AttrType::RELATED_OUTPUT_pin);
  mDic.add("related_outputs", AttrType::related_outputs);
  mDic.add("related_pg_pin", AttrType::RELATED_PG_pin);
  mDic.add("related_pin", AttrType::RELATED_pin);
  mDic.add("resistance", AttrType::resistance);
  mDic.add("resource_usage", AttrType::resource_usage);
  mDic.add("retain_fall_slew", AttrType::retain_fall_slew);
  mDic.add("retain_rise_slew", AttrType::retain_rise_slew);
  mDic.add("retaining_fall", AttrType::retaining_fall);
  mDic.add("retaining_rise", AttrType::retaining_rise);
  mDic.add("revision", AttrType::revision);
  mDic.add("rise_capacitance_range", AttrType::RISE_capacitance_RANGE);
  mDic.add("rise_capacitance", AttrType::RISE_capacitance);
  mDic.add("rise_constraint", AttrType::rise_constraint);
  mDic.add("rise_current_slope_after_threshold", AttrType::rise_current_slope_after_threshold);
  mDic.add("rise_current_slope_before_threshold", AttrType::rise_current_slope_before_threshold);
  mDic.add("rise_delay_intercept", AttrType::rise_delay_intercept);
  mDic.add("rise_pin_resistance", AttrType::RISE_pin_resistance);
  mDic.add("rise_power", AttrType::RISE_power);
  mDic.add("rise_propagation", AttrType::rise_propagation);
  mDic.add("rise_resistance", AttrType::RISE_resistance);
  mDic.add("rise_time_after_threshold", AttrType::rise_time_after_threshold);
  mDic.add("rise_time_before_threshold", AttrType::rise_time_before_threshold);
  mDic.add("rise_transition_degradation", AttrType::rise_transition_degradation);
  mDic.add("rise_transition", AttrType::rise_transition);
  mDic.add("rising_together_group", AttrType::rising_together_group);
  mDic.add("routing_layers", AttrType::routing_layers);
  mDic.add("routing_track", AttrType::routing_track);
  mDic.add("scaled_cell", AttrType::SCALED_cell);
  mDic.add("scaling_factors", AttrType::scaling_factors);
  mDic.add("sdf_cond_end", AttrType::sdf_cond_end);
  mDic.add("sdf_cond_start", AttrType::sdf_cond_start);
  mDic.add("sdf_cond", AttrType::sdf_cond);
  mDic.add("sdf_edges", AttrType::sdf_edges);
  mDic.add("signal_type", AttrType::signal_type);
  mDic.add("simulation", AttrType::simulation);
  mDic.add("single_bit_degenerate", AttrType::single_bit_degenerate);
  mDic.add("slew_control", AttrType::slew_control);
  mDic.add("slew_derate_from_library", AttrType::SLEW_DERATE_FROM_library);
  mDic.add("slew_lower_threshold_pct_fall", AttrType::slew_lower_threshold_pct_fall);
  mDic.add("slew_lower_threshold_pct_rise", AttrType::slew_lower_threshold_pct_rise);
  mDic.add("slew_type", AttrType::slew_type);
  mDic.add("slew_upper_threshold_pct_fall", AttrType::slew_upper_threshold_pct_fall);
  mDic.add("slew_upper_threshold_pct_rise", AttrType::slew_upper_threshold_pct_rise);
  mDic.add("slope_fall", AttrType::slope_fall);
  mDic.add("slope_rise", AttrType::slope_rise);
  mDic.add("slope", AttrType::slope);
  mDic.add("state_function", AttrType::STATE_function);
  mDic.add("statetable", AttrType::statetable);
  mDic.add("steady_state_current_high", AttrType::steady_state_current_high);
  mDic.add("steady_state_current_low", AttrType::steady_state_current_low);
  mDic.add("steady_state_current_tristate", AttrType::steady_state_current_tristate);
  mDic.add("switching_interval", AttrType::switching_interval);
  mDic.add("switching_together_group", AttrType::switching_together_group);
  mDic.add("table", AttrType::table);
  mDic.add("technology", AttrType::technology);
  mDic.add("temperature", AttrType::temperature);
  mDic.add("test_cell", AttrType::TEST_cell);
  mDic.add("test_output_only", AttrType::test_output_only);
  mDic.add("three_state", AttrType::three_state);
  mDic.add("time_unit", AttrType::time_unit);
  mDic.add("timing_model_type", AttrType::timing_model_type);
  mDic.add("timing_range", AttrType::timing_range);
  mDic.add("timing_sense", AttrType::timing_sense);
  mDic.add("timing_type", AttrType::timing_type);
  mDic.add("timing", AttrType::timing);
  mDic.add("tlatch", AttrType::Tlatch);
  mDic.add("tree_type", AttrType::tree_type);
  mDic.add("type", AttrType::type);
  mDic.add("use_for_size_only", AttrType::use_for_size_only);
  mDic.add("value", AttrType::value);
  mDic.add("values", AttrType::valueS);
  mDic.add("variable_1", AttrType::variable_1);
  mDic.add("variable_2", AttrType::variable_2);
  mDic.add("variable_3", AttrType::variable_3);
  mDic.add("vhdl_name", AttrType::vhdl_name);
  mDic.add("vih", AttrType::vih);
  mDic.add("vil", AttrType::vil);
  mDic.add("vimax", AttrType::vimax);
  mDic.add("vimin", AttrType::vimin);
  mDic.add("voh", AttrType::voh);
  mDic.add("vol", AttrType::vol);
  mDic.add("voltage_unit", AttrType::volTAGE_UNIT);
  mDic.add("voltage", AttrType::volTAGE);
  mDic.add("vomax", AttrType::vomax);
  mDic.add("vomin", AttrType::vomin);
  mDic.add("when_end", AttrType::when_end);
  mDic.add("when_start", AttrType::when_start);
  mDic.add("when", AttrType::when);
  mDic.add("wire_load_from_area", AttrType::wire_load_FROM_area);
  mDic.add("wire_load_selection", AttrType::wire_load_selection);
  mDic.add("wire_load_table", AttrType::wire_load_table);
  mDic.add("wire_load", AttrType::wire_load);
  mDic.add("x_function", AttrType::X_function);
}

// @brief デストラクタ
AttrDic::~AttrDic()
{
}

// @brief 文字列を属性値に変換する．
// @param[in] str 文字列
// @return str に対応する AttrType の値
//
// 対応する値がない場合は AttrType::none を返す．
AttrType
AttrDic::get(const char* str) const
{
  if ( mDic.check(str) ) {
    return mDic[str];
  }
  else {
    return AttrType::none;
  }
}

// @brief AttrType の内容をストリームに出力する．
ostream&
operator<<(ostream& s,
	   AttrType attr)
{
  switch ( attr ) {
  case AttrType::none: s << "none"; break;
  case AttrType::area: s << "area"; break;
  case AttrType::auxiliary_pad_cell: s << "auxiliary_pad_cell"; break;
  case AttrType::base_name: s << "base_name"; break;
  case AttrType::bit_width: s << "bit_width"; break;
  case AttrType::bundle: s << "bundle"; break;
  case AttrType::bus_naming_style: s << "bus_naming_style"; break;
  case AttrType::bus_type: s << "bus_type"; break;
  case AttrType::bus: s << "bus"; break;
  case AttrType::calc_mode: s << "calc_mode"; break;
  case AttrType::capacitance: s << "capacitance"; break;
  case AttrType::capacitive_load_unit: s << "capacitive_load_unit"; break;
  case AttrType::cell_degradation: s << "cell_degradation"; break;
  case AttrType::cell_fall: s << "cell_fall"; break;
  case AttrType::cell_footprint: s << "cell_footprint"; break;
  case AttrType::cell_leakage_power: s << "cell_leakage_power"; break;
  case AttrType::cell_rise: s << "cell_rise"; break;
  case AttrType::cell: s << "cell"; break;
  case AttrType::clear_preset_var1: s << "clear_preset_var1"; break;
  case AttrType::clear_preset_var2: s << "clear_preset_var2"; break;
  case AttrType::clear: s << "clear"; break;
  case AttrType::clock_gate_clock_pin: s << "clock_gate_clock_pin"; break;
  case AttrType::clock_gate_enable_pin: s << "clock_gate_enable_pin"; break;
  case AttrType::clock_gate_test_pin: s << "clock_gate_test_pin"; break;
  case AttrType::clock_gate_obs_pin: s << "clock_gate_obs_pin"; break;
  case AttrType::clock_gate_out_pin: s << "clock_gate_out_pin"; break;
  case AttrType::clock_GATING_INTEGRATED_cell: s << "clock_gating_integrated_cell"; break;
  case AttrType::clock: s << "clock"; break;
  case AttrType::clockED_ON_ALSO: s << "clocked_on_also"; break;
  case AttrType::clockED_ON: s << "clocked_on"; break;
  case AttrType::coefs: s << "coefs"; break;
  case AttrType::comment: s << "comment"; break;
  case AttrType::complementary_pin: s << "complementary_pin"; break;
  case AttrType::connection_class: s << "connection_class"; break;
  case AttrType::contention_condition: s << "contention_condition"; break;
  case AttrType::current_unit: s << "current_unit"; break;
  case AttrType::data_in: s << "data_in"; break;
  case AttrType::date: s << "date"; break;
  case AttrType::dc_current_template: s << "dc_current_template"; break;
  case AttrType::DEFAULT_cell_leakage_power: s << "default_cell_leakage_power"; break;
  case AttrType::DEFAULT_connection_class: s << "default_connection_class"; break;
  case AttrType::default_fall_delay_intercept: s << "default_fall_delay_intercept"; break;
  case AttrType::default_fall_pin_resistance: s << "default_fall_pin_resistance"; break;
  case AttrType::default_fanout_load: s << "default_fanout_load"; break;
  case AttrType::default_inout_pin_cap: s << "default_inout_pin_cap"; break;
  case AttrType::default_inout_pin_fall_res: s << "default_inout_pin_fall_res"; break;
  case AttrType::default_inout_pin_rise_res: s << "default_inout_pin_rise_res"; break;
  case AttrType::default_input_pin_cap: s << "default_input_pin_cap"; break;
  case AttrType::default_intrinsic_fall: s << "default_intrinsic_fall"; break;
  case AttrType::default_intrinsic_rise: s << "default_intrinsic_rise"; break;
  case AttrType::default_leakage_power_density: s << "default_leakage_power_density"; break;
  case AttrType::DEFAULT_MAX_capacitance: s << "default_max_capacitance"; break;
  case AttrType::default_max_fanout: s << "default_max_fanout"; break;
  case AttrType::default_max_transition: s << "default_max_transition"; break;
  case AttrType::default_max_utilization: s << "default_max_utilization"; break;
  case AttrType::default_min_porosity: s << "default_min_porosity"; break;
  case AttrType::default_operating_conditions: s << "default_operating_conditions"; break;
  case AttrType::default_output_pin_cap: s << "default_output_pin_cap"; break;
  case AttrType::default_output_pin_fall_res: s << "default_output_pin_fall_res"; break;
  case AttrType::default_output_pin_rise_res: s << "default_output_pin_rise_res"; break;
  case AttrType::default_part: s << "default_part"; break;
  case AttrType::default_rise_delay_intercept: s << "default_rise_delay_intercept"; break;
  case AttrType::default_rise_pin_resistance: s << "default_rise_pin_resistance"; break;
  case AttrType::default_slope_fall: s << "default_slope_fall"; break;
  case AttrType::default_slope_rise: s << "default_slope_rise"; break;
  case AttrType::default_wire_load_area: s << "default_wire_load_area"; break;
  case AttrType::default_wire_load_capacitance: s << "default_wire_load_capacitance"; break;
  case AttrType::default_wire_load_mode: s << "default_wire_load_mode"; break;
  case AttrType::default_wire_load_resistance: s << "default_wire_load_resistance"; break;
  case AttrType::default_wire_load_selection: s << "default_wire_load_selection"; break;
  case AttrType::default_wire_load: s << "default_wire_load"; break;
  case AttrType::define_cell_area: s << "define_cell_area"; break;
  case AttrType::define_group: s << "define_group"; break;
  case AttrType::define: s << "define"; break;
  case AttrType::delay_model: s << "delay_model"; break;
  case AttrType::direction: s << "direction"; break;
  case AttrType::domain: s << "domain"; break;
  case AttrType::dont_fault: s << "dont_fault"; break;
  case AttrType::dont_touch: s << "dont_touch"; break;
  case AttrType::dont_use: s << "dont_use"; break;
  case AttrType::drive_current: s << "drive_current"; break;
  case AttrType::driver_type: s << "driver_type"; break;
  case AttrType::dynamic_current: s << "dynamic_current"; break;
  case AttrType::edge_rate_sensitivity_f0: s << "edge_rate_sensitivity_f0"; break;
  case AttrType::edge_rate_sensitivity_f1: s << "edge_rate_sensitivity_f1"; break;
  case AttrType::edge_rate_sensitivity_r0: s << "edge_rate_sensitivity_r0"; break;
  case AttrType::edge_rate_sensitivity_r1: s << "edge_rate_sensitivity_r1"; break;
  case AttrType::edif_name: s << "edif_name"; break;
  case AttrType::electromigration: s << "electromigration"; break;
  case AttrType::em_lut_template: s << "em_lut_template"; break;
  case AttrType::em_temp_degradation_factor: s << "em_temp_degradation_factor"; break;
  case AttrType::enable_also: s << "enable_also"; break;
  case AttrType::enable: s << "enable"; break;
  case AttrType::equal_or_opposite_output: s << "equal_or_opposite_output"; break;
  case AttrType::FALL_capacitance_RANGE: s << "fall_capacitance_range"; break;
  case AttrType::FALL_capacitance: s << "fall_capacitance"; break;
  case AttrType::fall_constraint: s << "fall_constraint"; break;
  case AttrType::fall_current_slope_after_threshold: s << "fall_current_slope_after_threshold"; break;
  case AttrType::fall_current_slope_before_threshold: s << "fall_current_slope_before_threshold"; break;
  case AttrType::fall_delay_intercept: s << "fall_delay_intercept"; break;
  case AttrType::fall_pin_resistance: s << "fall_pin_resistance"; break;
  case AttrType::fall_power: s << "fall_power"; break;
  case AttrType::fall_propagation: s << "fall_propagation"; break;
  case AttrType::fall_resistance: s << "fall_resistance"; break;
  case AttrType::fall_time_after_threshold: s << "fall_time_after_threshold"; break;
  case AttrType::fall_time_before_threshold: s << "fall_time_before_threshold"; break;
  case AttrType::fall_transition_degradation: s << "fall_transition_degradation"; break;
  case AttrType::fall_transition: s << "fall_transition"; break;
  case AttrType::falling_together_group: s << "falling_together_group"; break;
  case AttrType::FANOUT_area: s << "fanout_area"; break;
  case AttrType::FANOUT_capacitance: s << "fanout_capacitance"; break;
  case AttrType::fanout_length: s << "fanout_length"; break;
  case AttrType::fanout_load: s << "fanout_load"; break;
  case AttrType::fanout_resistance: s << "fanout_resistance"; break;
  case AttrType::fault_model: s << "fault_model"; break;
  case AttrType::faults_lut_template: s << "faults_lut_template"; break;
  case AttrType::ff_bank: s << "ff_bank"; break;
  case AttrType::ff: s << "ff"; break;
  case AttrType::FPGA_domain_STYLE: s << "fpga_domain_style"; break;
  case AttrType::fpga_technology: s << "fpga_technology"; break;
  case AttrType::function: s << "function"; break;
  case AttrType::functionAL_YIELD_METRIC: s << "functional_yield_metric"; break;
  case AttrType::GENERATED_clock: s << "generated_clock"; break;
  case AttrType::geometry_print: s << "geometry_print"; break;
  case AttrType::handle_negative_constraint: s << "handle_negative_constraint"; break;
  case AttrType::has_builtin_pad: s << "has_builtin_pad"; break;
  case AttrType::hyperbolic_noise_above_high: s << "hyperbolic_noise_above_high"; break;
  case AttrType::hyperbolic_noise_below_low: s << "hyperbolic_noise_below_low"; break;
  case AttrType::hyperbolic_noise_high: s << "hyperbolic_noise_high"; break;
  case AttrType::hyperbolic_noise_low: s << "hyperbolic_noise_low"; break;
  case AttrType::hysteresis: s << "hysteresis"; break;
  case AttrType::in_place_swap_mode: s << "in_place_swap_mode"; break;
  case AttrType::index_1: s << "index_1"; break;
  case AttrType::index_2: s << "index_2"; break;
  case AttrType::index_3: s << "index_3"; break;
  case AttrType::input_map: s << "input_map"; break;
  case AttrType::input_signal_level: s << "input_signal_level"; break;
  case AttrType::input_threshold_pct_fall: s << "input_threshold_pct_fall"; break;
  case AttrType::input_threshold_pct_rise: s << "input_threshold_pct_rise"; break;
  case AttrType::input_voltage: s << "input_voltage"; break;
  case AttrType::interface_timing: s << "interface_timing"; break;
  case AttrType::internal_node: s << "internal_node"; break;
  case AttrType::internal_power: s << "internal_power"; break;
  case AttrType::intrinsic_fall: s << "intrinsic_fall"; break;
  case AttrType::intrinsic_parasitic: s << "intrinsic_parasitic"; break;
  case AttrType::intrinsic_rise: s << "intrinsic_rise"; break;
  case AttrType::inverted_output: s << "inverted_output"; break;
  case AttrType::io_type: s << "io_type"; break;
  case AttrType::IS_clock_GATING_cell: s << "is_clock_gating_cell"; break;
  case AttrType::IS_FILLER_cell: s << "is_filler_cell"; break;
  case AttrType::is_pad: s << "is_pad"; break;
  case AttrType::iv_lut_template: s << "iv_lut_template"; break;
  case AttrType::K_process_cell_fall: s << "k_process_cell_fall"; break;
  case AttrType::K_process_cell_leakage_power: s << "k_process_cell_leakage_power"; break;
  case AttrType::K_process_cell_rise: s << "k_process_cell_rise"; break;
  case AttrType::K_process_drive_current: s << "k_process_drive_current"; break;
  case AttrType::k_process_drive_fall: s << "k_process_drive_fall"; break;
  case AttrType::k_process_drive_rise: s << "k_process_drive_rise"; break;
  case AttrType::K_process_fall_delay_intercept: s << "k_process_fall_delay_intercept"; break;
  case AttrType::K_process_fall_pin_resistance: s << "k_process_fall_pin_resistance"; break;
  case AttrType::K_process_fall_propagation: s << "k_process_fall_propagation"; break;
  case AttrType::K_process_fall_transition: s << "k_process_fall_transition"; break;
  case AttrType::k_process_hold_fall: s << "k_process_hold_fall"; break;
  case AttrType::k_process_hold_rise: s << "k_process_hold_rise"; break;
  case AttrType::K_process_internal_power: s << "k_process_internal_power"; break;
  case AttrType::K_process_intrinsic_fall: s << "k_process_intrinsic_fall"; break;
  case AttrType::K_process_intrinsic_rise: s << "k_process_intrinsic_rise"; break;
  case AttrType::k_process_min_period: s << "k_process_min_period"; break;
  case AttrType::k_process_min_pulse_width_high: s << "k_process_min_pulse_width_high"; break;
  case AttrType::k_process_min_pulse_width_low: s << "k_process_min_pulse_width_low"; break;
  case AttrType::k_process_nochange_fall: s << "k_process_nochange_fall"; break;
  case AttrType::k_process_nochange_rise: s << "k_process_nochange_rise"; break;
  case AttrType::k_process_pin_cap: s << "k_process_pin_cap"; break;
  case AttrType::k_process_recovery_fall: s << "k_process_recovery_fall"; break;
  case AttrType::k_process_recovery_rise: s << "k_process_recovery_rise"; break;
  case AttrType::k_process_removal_fall: s << "k_process_removal_fall"; break;
  case AttrType::k_process_removal_rise: s << "k_process_removal_rise"; break;
  case AttrType::k_process_rise_transition: s << "k_process_rise_transition"; break;
  case AttrType::k_process_rise_delay_intercept: s << "k_process_rise_delay_intercept"; break;
  case AttrType::k_process_rise_pin_resistance: s << "k_process_rise_pin_resistance"; break;
  case AttrType::k_process_rise_propagation: s << "k_process_rise_propagation"; break;
  case AttrType::k_process_setup_fall: s << "k_process_setup_fall"; break;
  case AttrType::k_process_setup_rise: s << "k_process_setup_rise"; break;
  case AttrType::k_process_skew_fall: s << "k_process_skew_fall"; break;
  case AttrType::k_process_skew_rise: s << "k_process_skew_rise"; break;
  case AttrType::k_process_slope_fall: s << "k_process_slope_fall"; break;
  case AttrType::k_process_slope_rise: s << "k_process_slope_rise"; break;
  case AttrType::k_process_wire_cap: s << "k_process_wire_cap"; break;
  case AttrType::k_process_wire_res: s << "k_process_wire_res"; break;
  case AttrType::K_TEMP_cell_fall: s << "k_temp_cell_fall"; break;
  case AttrType::K_TEMP_cell_leakage_power: s << "k_temp_cell_leakage_power"; break;
  case AttrType::K_TEMP_cell_rise: s << "k_temp_cell_rise"; break;
  case AttrType::K_TEMP_drive_current: s << "k_temp_drive_current"; break;
  case AttrType::k_temp_drive_fall: s << "k_temp_drive_fall"; break;
  case AttrType::k_temp_drive_rise: s << "k_temp_drive_rise"; break;
  case AttrType::K_TEMP_fall_delay_intercept: s << "k_temp_fall_delay_intercept"; break;
  case AttrType::K_TEMP_fall_pin_resistance: s << "k_temp_fall_pin_resistance"; break;
  case AttrType::K_TEMP_fall_propagation: s << "k_temp_fall_propagation"; break;
  case AttrType::K_TEMP_fall_transition: s << "k_temp_fall_transition"; break;
  case AttrType::k_temp_hold_fall: s << "k_temp_hold_fall"; break;
  case AttrType::k_temp_hold_rise: s << "k_temp_hold_rise"; break;
  case AttrType::K_TEMP_internal_power: s << "k_temp_internal_power"; break;
  case AttrType::K_TEMP_intrinsic_fall: s << "k_temp_intrinsic_fall"; break;
  case AttrType::K_TEMP_intrinsic_rise: s << "k_temp_intrinsic_rise"; break;
  case AttrType::k_temp_min_period: s << "k_temp_min_period"; break;
  case AttrType::k_temp_min_pulse_width_high: s << "k_temp_min_pulse_width_high"; break;
  case AttrType::k_temp_min_pulse_width_low: s << "k_temp_min_pulse_width_low"; break;
  case AttrType::k_temp_nochange_fall: s << "k_temp_nochange_fall"; break;
  case AttrType::k_temp_nochange_rise: s << "k_temp_nochange_rise"; break;
  case AttrType::k_temp_pin_cap: s << "k_temp_pin_cap"; break;
  case AttrType::k_temp_recovery_fall: s << "k_temp_recovery_fall"; break;
  case AttrType::k_temp_recovery_rise: s << "k_temp_recovery_rise"; break;
  case AttrType::k_temp_removal_fall: s << "k_temp_removal_fall"; break;
  case AttrType::k_temp_removal_rise: s << "k_temp_removal_rise"; break;
  case AttrType::k_temp_rise_transition: s << "k_temp_rise_transition"; break;
  case AttrType::k_temp_rise_delay_intercept: s << "k_temp_rise_delay_intercept"; break;
  case AttrType::k_temp_rise_pin_resistance: s << "k_temp_rise_pin_resistance"; break;
  case AttrType::k_temp_rise_propagation: s << "k_temp_rise_propagation"; break;
  case AttrType::k_temp_setup_fall: s << "k_temp_setup_fall"; break;
  case AttrType::k_temp_setup_rise: s << "k_temp_setup_rise"; break;
  case AttrType::k_temp_skew_fall: s << "k_temp_skew_fall"; break;
  case AttrType::k_temp_skew_rise: s << "k_temp_skew_rise"; break;
  case AttrType::k_temp_slope_fall: s << "k_temp_slope_fall"; break;
  case AttrType::k_temp_slope_rise: s << "k_temp_slope_rise"; break;
  case AttrType::k_temp_wire_cap: s << "k_temp_wire_cap"; break;
  case AttrType::k_temp_wire_res: s << "k_temp_wire_res"; break;
  case AttrType::K_volT_cell_fall: s << "k_volt_cell_fall"; break;
  case AttrType::K_volT_cell_leakage_power: s << "k_volt_cell_leakage_power"; break;
  case AttrType::K_volT_cell_rise: s << "k_volt_cell_rise"; break;
  case AttrType::K_volT_drive_current: s << "k_volt_drive_current"; break;
  case AttrType::k_volt_drive_fall: s << "k_volt_drive_fall"; break;
  case AttrType::k_volt_drive_rise: s << "k_volt_drive_rise"; break;
  case AttrType::K_volT_fall_delay_intercept: s << "k_volt_fall_delay_intercept"; break;
  case AttrType::K_volT_fall_pin_resistance: s << "k_volt_fall_pin_resistance"; break;
  case AttrType::K_volT_fall_propagation: s << "k_volt_fall_propagation"; break;
  case AttrType::K_volT_fall_transition: s << "k_volt_fall_transition"; break;
  case AttrType::k_volt_hold_fall: s << "k_volt_hold_fall"; break;
  case AttrType::k_volt_hold_rise: s << "k_volt_hold_rise"; break;
  case AttrType::K_volT_internal_power: s << "k_volt_internal_power"; break;
  case AttrType::K_volT_intrinsic_fall: s << "k_volt_intrinsic_fall"; break;
  case AttrType::K_volT_intrinsic_rise: s << "k_volt_intrinsic_rise"; break;
  case AttrType::k_volt_min_period: s << "k_volt_min_period"; break;
  case AttrType::k_volt_min_pulse_width_high: s << "k_volt_min_pulse_width_high"; break;
  case AttrType::k_volt_min_pulse_width_low: s << "k_volt_min_pulse_width_low"; break;
  case AttrType::k_volt_nochange_fall: s << "k_volt_nochange_fall"; break;
  case AttrType::k_volt_nochange_rise: s << "k_volt_nochange_rise"; break;
  case AttrType::k_volt_pin_cap: s << "k_volt_pin_cap"; break;
  case AttrType::k_volt_recovery_fall: s << "k_volt_recovery_fall"; break;
  case AttrType::k_volt_recovery_rise: s << "k_volt_recovery_rise"; break;
  case AttrType::k_volt_removal_fall: s << "k_volt_removal_fall"; break;
  case AttrType::k_volt_removal_rise: s << "k_volt_removal_rise"; break;
  case AttrType::k_volt_rise_transition: s << "k_volt_rise_transition"; break;
  case AttrType::k_volt_rise_delay_intercept: s << "k_volt_rise_delay_intercept"; break;
  case AttrType::k_volt_rise_pin_resistance: s << "k_volt_rise_pin_resistance"; break;
  case AttrType::k_volt_rise_propagation: s << "k_volt_rise_propagation"; break;
  case AttrType::k_volt_setup_fall: s << "k_volt_setup_fall"; break;
  case AttrType::k_volt_setup_rise: s << "k_volt_setup_rise"; break;
  case AttrType::k_volt_skew_fall: s << "k_volt_skew_fall"; break;
  case AttrType::k_volt_skew_rise: s << "k_volt_skew_rise"; break;
  case AttrType::k_volt_slope_fall: s << "k_volt_slope_fall"; break;
  case AttrType::k_volt_slope_rise: s << "k_volt_slope_rise"; break;
  case AttrType::k_volt_wire_cap: s << "k_volt_wire_cap"; break;
  case AttrType::k_volt_wire_res: s << "k_volt_wire_res"; break;
  case AttrType::latch_bank: s << "latch_bank"; break;
  case AttrType::latch: s << "latch"; break;
  case AttrType::leakage_current: s << "leakage_current"; break;
  case AttrType::leakage_power_unit: s << "leakage_power_unit"; break;
  case AttrType::leakage_power: s << "leakage_power"; break;
  case AttrType::library_features: s << "library_features"; break;
  case AttrType::library: s << "library"; break;
  case AttrType::lu_table_template: s << "lu_table_template"; break;
  case AttrType::lut: s << "lut"; break;
  case AttrType::map_only: s << "map_only"; break;
  case AttrType::MAX_capacitance: s << "max_capacitance"; break;
  case AttrType::max_fanout: s << "max_fanout"; break;
  case AttrType::max_input_noise_width: s << "max_input_noise_width"; break;
  case AttrType::max_trans: s << "max_trans"; break;
  case AttrType::max_transITION: s << "max_transition"; break;
  case AttrType::members: s << "members"; break;
  case AttrType::MIN_capacitance: s << "min_capacitance"; break;
  case AttrType::min_fanout: s << "min_fanout"; break;
  case AttrType::min_input_noise_width: s << "min_input_noise_width"; break;
  case AttrType::min_period: s << "min_period"; break;
  case AttrType::min_pulse_width_high: s << "min_pulse_width_high"; break;
  case AttrType::min_pulse_width_low: s << "min_pulse_width_low"; break;
  case AttrType::min_pulse_width: s << "min_pulse_width"; break;
  case AttrType::min_transition: s << "min_transition"; break;
  case AttrType::minimum_period: s << "minimum_period"; break;
  case AttrType::mode_definition: s << "mode_definition"; break;
  case AttrType::MULTIcell_PAD_pin: s << "multicell_pad_pin"; break;
  case AttrType::next_state: s << "next_state"; break;
  case AttrType::nextstate_type: s << "nextstate_type"; break;
  case AttrType::noise_immunity_above_high: s << "noise_immunity_above_high"; break;
  case AttrType::noise_immunity_below_low: s << "noise_immunity_below_low"; break;
  case AttrType::noise_immunity_high: s << "noise_immunity_high"; break;
  case AttrType::noise_immunity_low: s << "noise_immunity_low"; break;
  case AttrType::NOISE_lut_TEMPLATE: s << "noise_lut_template"; break;
  case AttrType::NOM_calc_mode: s << "nom_calc_mode"; break;
  case AttrType::nom_process: s << "nom_process"; break;
  case AttrType::nom_temperature: s << "nom_temperature"; break;
  case AttrType::nom_voltage: s << "nom_voltage"; break;
  case AttrType::operating_conditions: s << "operating_conditions"; break;
  case AttrType::orders: s << "orders"; break;
  case AttrType::output_current_template: s << "output_current_template"; break;
  case AttrType::output_signal_level: s << "output_signal_level"; break;
  case AttrType::output_threshold_pct_fall: s << "output_threshold_pct_fall"; break;
  case AttrType::output_threshold_pct_rise: s << "output_threshold_pct_rise"; break;
  case AttrType::output_voltage: s << "output_voltage"; break;
  case AttrType::PAD_cell: s << "pad_cell"; break;
  case AttrType::pad_type: s << "pad_type"; break;
  case AttrType::parameter1: s << "parameter1"; break;
  case AttrType::parameter2: s << "parameter2"; break;
  case AttrType::parameter3: s << "parameter3"; break;
  case AttrType::parameter4: s << "parameter4"; break;
  case AttrType::parameter5: s << "parameter5"; break;
  case AttrType::part: s << "part"; break;
  case AttrType::PIECE_define: s << "piece_define"; break;
  case AttrType::piece_type: s << "piece_type"; break;
  case AttrType::pin_func_type: s << "pin_func_type"; break;
  case AttrType::pin_opposite: s << "pin_opposite"; break;
  case AttrType::pin: s << "pin"; break;
  case AttrType::poly_template: s << "poly_template"; break;
  case AttrType::power_cell_type: s << "power_cell_type"; break;
  case AttrType::power_level: s << "power_level"; break;
  case AttrType::power_lut_TEMPLATE: s << "power_lut_template"; break;
  case AttrType::power_poly_template: s << "power_poly_template"; break;
  case AttrType::power_model: s << "power_model"; break;
  case AttrType::power_rail: s << "power_rail"; break;
  case AttrType::power_supply_namestring: s << "power_supply_namestring"; break;
  case AttrType::power_supply: s << "power_supply"; break;
  case AttrType::power: s << "power"; break;
  case AttrType::prefer_tied: s << "prefer_tied"; break;
  case AttrType::preferred: s << "preferred"; break;
  case AttrType::preferred_INPUT_PAD_volTAGE: s << "preferred_input_pad_voltage"; break;
  case AttrType::preferred_OUTPUT_PAD_SLEW_RATE_CONTROL: s << "preferred_output_pad_slew_rate_control"; break;
  case AttrType::preferred_OUTPUT_PAD_volTAGE: s << "preferred_output_pad_voltage"; break;
  case AttrType::preset: s << "preset"; break;
  case AttrType::primary_output: s << "primary_output"; break;
  case AttrType::process: s << "process"; break;
  case AttrType::propagated_noise_height_above_high: s << "propagated_noise_height_above_high"; break;
  case AttrType::propagated_noise_height_below_low: s << "propagated_noise_height_below_low"; break;
  case AttrType::propagated_noise_height_high: s << "propagated_noise_height_high"; break;
  case AttrType::propagated_noise_height_low: s << "propagated_noise_height_low"; break;
  case AttrType::propagated_noise_peak_time_ratio_above_high: s << "propagated_noise_peak_time_ratio_above_high"; break;
  case AttrType::propagated_noise_peak_time_ratio_below_low: s << "propagated_noise_peak_time_ratio_below_low"; break;
  case AttrType::propagated_noise_peak_time_ratio_high: s << "propagated_noise_peak_time_ratio_high"; break;
  case AttrType::propagated_noise_peak_time_ratio_low: s << "propagated_noise_peak_time_ratio_low"; break;
  case AttrType::propagated_noise_width_above_high: s << "propagated_noise_width_above_high"; break;
  case AttrType::propagated_noise_width_below_low: s << "propagated_noise_width_below_low"; break;
  case AttrType::propagated_noise_width_high: s << "propagated_noise_width_high"; break;
  case AttrType::propagated_noise_width_low: s << "propagated_noise_width_low"; break;
  case AttrType::PROPAGATION_lut_TEMPLATE: s << "propagation_lut_template"; break;
  case AttrType::pulling_current: s << "pulling_current"; break;
  case AttrType::pulling_resistance_unit: s << "pulling_resistance_unit"; break;
  case AttrType::pulling_resistance: s << "pulling_resistance"; break;
  case AttrType::rail_connection: s << "rail_connection"; break;
  case AttrType::RELATED_bus_EQUIVALENT: s << "related_bus_equivalent"; break;
  case AttrType::RELATED_bus_pinS: s << "related_bus_pins"; break;
  case AttrType::related_inputs: s << "related_inputs"; break;
  case AttrType::RELATED_OUTPUT_pin: s << "related_output_pin"; break;
  case AttrType::related_outputs: s << "related_outputs"; break;
  case AttrType::RELATED_PG_pin: s << "related_pg_pin"; break;
  case AttrType::RELATED_pin: s << "related_pin"; break;
  case AttrType::resistance: s << "resistance"; break;
  case AttrType::resource_usage: s << "resource_usage"; break;
  case AttrType::retain_fall_slew: s << "retain_fall_slew"; break;
  case AttrType::retain_rise_slew: s << "retain_rise_slew"; break;
  case AttrType::retaining_fall: s << "retaining_fall"; break;
  case AttrType::retaining_rise: s << "retaining_rise"; break;
  case AttrType::revision: s << "revision"; break;
  case AttrType::RISE_capacitance_RANGE: s << "rise_capacitance_range"; break;
  case AttrType::RISE_capacitance: s << "rise_capacitance"; break;
  case AttrType::rise_constraint: s << "rise_constraint"; break;
  case AttrType::rise_current_slope_after_threshold: s << "rise_current_slope_after_threshold"; break;
  case AttrType::rise_current_slope_before_threshold: s << "rise_current_slope_before_threshold"; break;
  case AttrType::rise_delay_intercept: s << "rise_delay_intercept"; break;
  case AttrType::RISE_pin_resistance: s << "rise_pin_resistance"; break;
  case AttrType::RISE_power: s << "rise_power"; break;
  case AttrType::rise_propagation: s << "rise_propagation"; break;
  case AttrType::RISE_resistance: s << "rise_resistance"; break;
  case AttrType::rise_time_after_threshold: s << "rise_time_after_threshold"; break;
  case AttrType::rise_time_before_threshold: s << "rise_time_before_threshold"; break;
  case AttrType::rise_transition_degradation: s << "rise_transition_degradation"; break;
  case AttrType::rise_transition: s << "rise_transition"; break;
  case AttrType::rising_together_group: s << "rising_together_group"; break;
  case AttrType::routing_layers: s << "routing_layers"; break;
  case AttrType::routing_track: s << "routing_track"; break;
  case AttrType::SCALED_cell: s << "scaled_cell"; break;
  case AttrType::scaling_factors: s << "scaling_factors"; break;
  case AttrType::sdf_cond_end: s << "sdf_cond_end"; break;
  case AttrType::sdf_cond_start: s << "sdf_cond_start"; break;
  case AttrType::sdf_cond: s << "sdf_cond"; break;
  case AttrType::sdf_edges: s << "sdf_edges"; break;
  case AttrType::signal_type: s << "signal_type"; break;
  case AttrType::simulation: s << "simulation"; break;
  case AttrType::single_bit_degenerate: s << "single_bit_degenerate"; break;
  case AttrType::slew_control: s << "slew_control"; break;
  case AttrType::SLEW_DERATE_FROM_library: s << "slew_derate_from_library"; break;
  case AttrType::slew_lower_threshold_pct_fall: s << "slew_lower_threshold_pct_fall"; break;
  case AttrType::slew_lower_threshold_pct_rise: s << "slew_lower_threshold_pct_rise"; break;
  case AttrType::slew_type: s << "slew_type"; break;
  case AttrType::slew_upper_threshold_pct_fall: s << "slew_upper_threshold_pct_fall"; break;
  case AttrType::slew_upper_threshold_pct_rise: s << "slew_upper_threshold_pct_rise"; break;
  case AttrType::slope_fall: s << "slope_fall"; break;
  case AttrType::slope_rise: s << "slope_rise"; break;
  case AttrType::slope: s << "slope"; break;
  case AttrType::STATE_function: s << "state_function"; break;
  case AttrType::statetable: s << "statetable"; break;
  case AttrType::steady_state_current_high: s << "steady_state_current_high"; break;
  case AttrType::steady_state_current_low: s << "steady_state_current_low"; break;
  case AttrType::steady_state_current_tristate: s << "steady_state_current_tristate"; break;
  case AttrType::switching_interval: s << "switching_interval"; break;
  case AttrType::switching_together_group: s << "switching_together_group"; break;
  case AttrType::table: s << "table"; break;
  case AttrType::technology: s << "technology"; break;
  case AttrType::temperature: s << "temperature"; break;
  case AttrType::TEST_cell: s << "test_cell"; break;
  case AttrType::test_output_only: s << "test_output_only"; break;
  case AttrType::three_state: s << "three_state"; break;
  case AttrType::time_unit: s << "time_unit"; break;
  case AttrType::timing_model_type: s << "timing_model_type"; break;
  case AttrType::timing_range: s << "timing_range"; break;
  case AttrType::timing_sense: s << "timing_sense"; break;
  case AttrType::timing_type: s << "timing_type"; break;
  case AttrType::timing: s << "timing"; break;
  case AttrType::Tlatch: s << "tlatch"; break;
  case AttrType::tree_type: s << "tree_type"; break;
  case AttrType::type: s << "type"; break;
  case AttrType::use_for_size_only: s << "use_for_size_only"; break;
  case AttrType::value: s << "value"; break;
  case AttrType::valueS: s << "values"; break;
  case AttrType::variable_1: s << "variable_1"; break;
  case AttrType::variable_2: s << "variable_2"; break;
  case AttrType::variable_3: s << "variable_3"; break;
  case AttrType::vhdl_name: s << "vhdl_name"; break;
  case AttrType::vih: s << "vih"; break;
  case AttrType::vil: s << "vil"; break;
  case AttrType::vimax: s << "vimax"; break;
  case AttrType::vimin: s << "vimin"; break;
  case AttrType::voh: s << "voh"; break;
  case AttrType::vol: s << "vol"; break;
  case AttrType::volTAGE_UNIT: s << "voltage_unit"; break;
  case AttrType::volTAGE: s << "voltage"; break;
  case AttrType::vomax: s << "vomax"; break;
  case AttrType::vomin: s << "vomin"; break;
  case AttrType::when_end: s << "when_end"; break;
  case AttrType::when_start: s << "when_start"; break;
  case AttrType::when: s << "when"; break;
  case AttrType::wire_load_FROM_area: s << "wire_load_from_area"; break;
  case AttrType::wire_load_selection: s << "wire_load_selection"; break;
  case AttrType::wire_load_table: s << "wire_load_table"; break;
  case AttrType::wire_load: s << "wire_load"; break;
  case AttrType::X_function: s << "x_function"; break;
  case AttrType::END: s << "---"; break;
  }
  return s;
}

END_NAMESPACE_YM_DOTLIB
