				liberty 文法覚書

- 基本的な構文として
  * simple attribute
  * complex attribute
  * group statement
  の3種類がある．
  根本は library group statement でその下に再帰的に属性を持つ．


- simple attribute は
  <属性名> : <属性値> ;
  のシンタックスで表される．
  属性値としては
  * int
  * bool
  * float
  * string
  * expr
  がある．

  ただし，string 型の中には direction や technology の様に予め定められ
  た文字列しか受け付けないものもある．
  また，論理式は見かけは simple attribute だが，属性値の部分に空白を含
  むためパーサー的には別に扱う．
  ややこしいのは文字列中に式を書いた function 記述という型もある．
  こちらは一旦文字列としてパースしてから式に変換する．


- complex attribute は
  <属性名> ( <属性値1>, <属性値2>, ... ) ;
  のシンタックスで表される．
  属性値は simple attribute と同じ．ただし expr はない．
  個々の属性ごとに属性値の型は決まっている．

  こちらもめんどくさいのは見かけは一つの文字列だが，中が空白で区切られ
  た数値の場合がある(lookup table の values 属性等)．
  そのため特別なハンドラを用意する．


- group statement は
  <属性名> ( <属性値1>, <属性値2>, ... ) {
     <属性記述1>
     <属性記述2>
     ...
  }
  のシンタックスで表される．
  最初の行は行末の '{' 以外は complex attribute と同様である．
  属性記述には simple attribute, complex attribute, group statement が記述できる．

- 多くの属性はそのグループ内において唯一のみ定義される．

- 同じ属性名が複数現れるのは
  * library.wire_load
  * library.wire_load_selection
  * library.wire_load_table
  * library.lu_table_template
  * library.power_lut_template
  * library.operating_conditions
  * library.cell
  * cell.bus
  * cell.bundle
  * cell.pin
  * cell.internal_power
  * test_cell.pin
  * bus.pin
  * bundle.internal_power
  * bundle.pin
  * bundle.timing
  * pin.internal_power
  * pin.timing

- パーサーの基本構造としては simple attribute, complex attribute,
  group statement の各属性用のパース関数を作る．
  そのなかで個々の属性に応じた処理を行うため DotlibHandler
  というクラスを用いる．
  この DotlibHandler を継承したクラスが実際のパース処理を行う．


- simple attribute の型は
  * int                  -> Int
  * bool                 -> Bool
  * float                -> Float
  * string               -> String
  * expr                 -> Expr
  * function             -> Expr
  * 'clear_preset_var_n' -> CPType
  * 'delay_model'        -> DelayModel
  * 'direction'          -> PinDirection
  * 'technology'         -> Technology
  * 'timing_sense'       -> TimingSense
  * 'timing_type'        -> TimingType
  * 'variable_type'      -> VarType


- complex attribute の型は
  * 'coefs'              -> FloatVector
  * (float, float)       -> Float, Float
  * 'index_n'            -> FloatVector
  * 'orders'             -> IntVector
  * 'piece wise'         -> PieceWise
  * 'unit'               -> Unit
  * 'values'             -> FloatVector
  * 'variable_n_range'   -> VariableRange


- group statement の型は
  * 'bus'                -> Bus
  * 'bundle'             -> Bundle
  * 'cell'               -> Cell
  * 'cell_degradation'   -> CellDegradation
  * 'domain'             -> Domain
  * 'ff'                 -> FF
  * 'ff_bank'            -> FFBank
  * 'input_voltage'      -> InputVoltage
  * 'latch'              -> Latch
  * 'latch_bank'         -> LatchBank
  * 'library'            -> Library
  * 'lu_table'           -> Lut
  * 'output_voltage'     -> OutputVoltage
  * 'pin'                -> Pin
  * 'statetable'         -> Statetable
  * 'template'           -> Template
  * 'timing'             -> Timing


- 以下，整理されていないおぼえ書き

- "ff" と ff は同じ

- include_file ( filename );
  結構，制限があるし，今はあまり使われていないみたい．

- current_unit は
  1uA, 10uA, 100uA, 1mA, 10mA, 100mA, 1A
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- power_unit は
  1mW, 100uW, 10uW, 1uW, 100nW, 10nW, 1nW, 100pW, 10pW, 1pW
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- resistance_unit は
  1ohm, 10ohm, 100ohm, 1kohm
  のいずれか．
  "" なしが認められるかは不明だがあると思った方がよい．

- revision の値は string or number といっているが，
  1.01a というのもあるので [0-9a-zA-Z.]* でいいのでは？
  もしくは非空白印字可能文字は全部含めてしまってもいいかも．

- time_unit は
  1ps, 10ps, 100ps, 1ns
  のいずれか．
  用例をみるかぎり "" なしもあるみたい．

- voltage_unit は
  1mV, 10mV, 100mV, 1V
  用例をみるかぎり "" なしもあるみたい．

- capacitive_unit は
  ff か pf

- input_voltage や output_voltage に出てくる expression は
  以下みたいな感じ？
  expression : float_number
  	     | 'VDD'
	     | 'VSS'
	     | 'VCC'
             | '(' expression ')'
	     | '+' expression
	     | '-' expression
	     | expression '+' expression
	     | expression '-' expression
	     | expression '*' expression
	     | expression '/' expression
