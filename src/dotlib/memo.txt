v				liberty 文法覚書

- 基本的な構文として
  * simple attribute
  * complex attribute
  * group statement
  の3種類がある．
  根本は library group statement でその下に再帰的に属性を持つ．


- simple attribute は
  <属性名> : <属性値> ;
  のシンタックスで表される．
  属性値としては
  * int
  * bool
  * float
  * string
  * expr
  がある．

  ただし，string 型の中には direction や timing_sense の様に予め定められ
  た文字列しか受け付けないものもある．
  また，論理式は見かけは simple attribute だが，属性値の部分に空白を含
  むためパーサー的には別に扱う．
  ややこしいのは文字列中に式を書いた function 記述という型もある．
  こちらは一旦文字列としてパースしてから式に変換する．
  前者は ExprHandler，後者は FuncHandler で表す．
  論理式は FuncHandler で扱う．


- complex attribute は
  <属性名> ( <属性値1>, <属性値2>, ... ) ;
  のシンタックスで表される．
  属性値は simple attribute と同じ．ただし expr はない．
  個々の属性ごとに属性値の型は決まっている．

  こちらもめんどくさいのは見かけは一つの文字列だが，中が空白で区切られ
  た数値の場合がある(lookup table の values 属性等)．
  そのため特別なハンドラを用意する．


- group statement は
  <属性名> ( <属性値1>, <属性値2>, ... ) {
     <属性記述1>
     <属性記述2>
     ...
  }
  のシンタックスで表される．
  最初の行は行末の '{' 以外は complex attribute と同様である．
  属性記述には simple attribute, complex attribute, group statement が記述できる．

- complex attribute と group statement のヘッダ部分は以下の種類がある．

  * EmptyHeaderHandler           : ( )
  * Float2HeaderHandler          : ( float, float )
  * FloatStrHeaderHandler        : ( float, string )
  * FloatVectorHeaderHandler     : ( "float, float, ..." )
  * FloatVectorListHeaderHandler : ( "float, float, ...", "float, flot, ...", ... )
  * IntFloatHeaderHandler        : ( integer, float )
  * IntFloatVectorHeaderHandler  : ( integer, "float, float, ..." )
  * IntVectorHeaderHandler       : ( "integer, integer, ..." )
  * Str1HeaderHandler            : ( string )
  * Str2HeaderHandler            : ( string, string )
  * Str2IntHeaderHandler         : ( string, string, integer )
  * StrListHeaderHandler         : ( string, string, ... )


- 属性には，必須/オプショナルなものと，唯一/複数のものがある．


- パーサーの基本構造としては simple attribute, complex attribute,
  group statement の各属性用のパース関数を作る．
  そのなかで個々の属性に応じた処理を行うため DotlibHandler
  というクラスを用いる．
  この DotlibHandler を継承したクラスが実際のパース処理を行う．

- パースした構文木を表すために AstNode というクラスを用意する．
  実際には AstNode の派生クラスの木構造で構文木を表す．

- 例えば xxx という型をパースする DotlibParser のメンバ関数は

  bool
  DotlibParser::parse_xxx(const AstXxx*& dst,
  			  AttrType attr_type,
			  const FileRegion& attr_loc);

  というインターフェイスを持つ．
  dst にパース結果が入る．

- simple attribute とそれに対応する AstNode の派生クラス
  * int                  -> AstInt
  * bool                 -> AstBool
  * float                -> AstFloat
  * string               -> AstString
  * expr                 -> AstExpr
  * function             -> AstExpr
  * 'clear_preset_var_n' -> AstCPType
  * 'delay_model'        -> AstDelayModel
  * 'direction'          -> AstPinDirection
  * 'technology'         -> AstTechnology
  * 'timing_sense'       -> AstTimingSense
  * 'timing_type'        -> AstTimingType
  * 'variable_type'      -> AstVarType


- complex attribute とそれに対応する AstNode の派生クラス
  * 'coefs'              -> AstFloatVector
  * (float, float)       -> (AstFloat, AstFloat)
  * 'index_n'            -> AstFloatVector
  * 'orders'             -> AstIntVector
  * 'piece wise'         -> AstPieceWise
  * 'unit'               -> AstUnit
  * 'values'             -> AstFloatVector
  * 'variable_n_range'   -> AstVariableRange


- group statement とそれに対応する AstNode の派生クラス
  * 'bus'                -> AstBus
  * 'bundle'             -> AstBundle
  * 'cell'               -> AstCell
  * 'cell_degradation'   -> AstCellDegradation
  * 'domain'             -> AstDomain
  * 'ff'                 -> AstFF
  * 'ff_bank'            -> AstFFBank
  * 'input_voltage'      -> AstInputVoltage
  * 'latch'              -> AstLatch
  * 'latch_bank'         -> AstLatchBank
  * 'library'            -> AstLibrary
  * 'lu_table'           -> AstLut
  * 'output_voltage'     -> AstOutputVoltage
  * 'pin'                -> AstPin
  * 'statetable'         -> AstStatetable
  * 'template'           -> AstTemplate
  * 'timing'             -> AstTiming


- AstXXX はコンストラクタで値を設定したらあとは const にしたいので，
  AstXXX を読み込む XXXHandler に一旦必要な値を保持しておいて
  XXXHandler を AstXXX のコンストラクタに渡す．いわゆるビルダークラス
  パターン.
  このような二度手間にしている理由は3nつ．
  * 可変長のリストをビルダクラス中では vector<> で保持しておいて
    AstXXX のコンストラクタでは固定長の配列として確保する．
  * パース途中でエラーが起こった場合に AstXXX のオブジェクトを確保
    しない．ビルダークラスのオブジェクトは自動変数として確保しておくの
    でエラー時には自動的に削除される．
  * AstXXX のコンストラクタのパラメータが簡潔になる．

- AstXXX, XXXHandler と関連した情報を持つのでもととなるデータからこれ
  らのクラスのヘッダファイルとソースファイルを自動生成する
  Python スクリプトを用意する．
  一旦，ファイルを作ってしまえば仕様変更がない限り再度生成する必要はな
  いので，生成後のファイルに手直しをすることも可能．


- 以下，整理されていないおぼえ書き

- "ff" と ff は同じ．というか文字列が予想される場合には " はあってもな
  くても同じ結果になる．異なるのは間に空白を含む場合．これは " がなけ
  ればならない．

- include_file ( filename );
  結構，制限があるし，今はあまり使われていないみたい．
  ここでは無視する．

- bus_naming_style が省略された場合のデフォルト値は
  "Bus%sPin%d"

- current_unit は
  1uA, 10uA, 100uA, 1mA, 10mA, 100mA, 1A
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- delay_model が省略された場合のデフォルト値は generic_cmos
  可能な値は generic_cmos, table_lookup, piecewise_cmos, dcm, polynomial

- fpga_domain_style は domain group 中の calc_mode で参照される．

- in_place_swap_mode は match_footprint か no_swapping

- {input|output}_threshold_pct_{rise|fall} の値は 0.0 から 100.0 の間の値

- piece_type は piece_length, piece_wire_cap, piece_pin_cap,
  piece_total_cap

- power_model は table_lookup, polynomical．デフォルトは table_lookup

- preferred_output_pad_slew_rate_control は high, medium, low, none

- power_unit は
  1mW, 100uW, 10uW, 1uW, 100nW, 10nW, 1nW, 100pW, 10pW, 1pW
  のいずれか．
  用例をみると "" つきとそうでないものがある．

- resistance_unit は
  1ohm, 10ohm, 100ohm, 1kohm
  のいずれか．
  "" なしが認められるかは不明だがあると思った方がよい．

- revision の値は string or number といっているが，
  1.01a というのもあるので [0-9a-zA-Z.]* でいいのでは？
  もしくは非空白印字可能文字は全部含めてしまってもいいかも．

- slew_derate_from_library の値は 0.0 から 1.0 の間

- slew_{upper|lower}_threshold_pct_{rise|fall} の値は 0.0 から 100.0 の間

- time_unit は
  1ps, 10ps, 100ps, 1ns
  のいずれか．デフォルトは 1ns
  用例をみるかぎり "" なしもあるみたい．

- voltage_unit は
  1mV, 10mV, 100mV, 1V．デフォルトは 1V
  用例をみるかぎり "" なしもあるみたい．

- default_wire_load_mode は top | segmented | enclosed

- capacitive_load_unit ( value_(float), unit_(enum) ) ;
  value は任意の float．
  unit は ff か pf

- default_part ( default_part_name_(string), speed_grade_(string) ) ;

- define ( "attribute_name", "group_name", "attribute_type" ) ;
  attribute_name : 属性名
  group_name : この属性が属するグループ名
  attribute_type : Boolean, string, integer, float のいずれか

- define_cell_area (area_name, resource_type) ;
  resource_type は pad_slots, pad_input_driver_sites,
  pad_output_driver_sites, pad_driver_sites

- define_group ( group_(id), parent_name_(id) ) ;
  group : グループ名
  parent_name : 親のグループ名

- library_features の値は report_delay_calculation,
  report_power_calculation, report_noise_calculation,
  report_user_data, allow_update_attribute
  デフォルトは none (そんな値ないじゃん)．
  これ complex attribute なのでもしかしたら
  これらの値が複数来ることがあるような気がする．

- routing_layers は routability information の前に定義されなければなら
  ない．
  この属性は唯一

- technology の値は cmos か fpga．デフォルトは cmos

- voltage_map ( voltage_name_(id), voltage_value_(float) ) ;
  string と float の組．
  複数ありうる．

- base_curves Group statement
  base_curves ( name ) {
    base_curve_type ( ccs_timing_half_curve ); // これのみ
    curve_x ( "float, float, ..." );
    curve_y ( id, "float, float, ..." );
  }

  * base_curve_type complex attribute は文字列を引数にとるが，
    現在は ccs_timing_half_curve のみが適正な値

  * curve_x complex attribute は浮動小数点数のリストの文字列を引数にと
    る．
  * curve_y complex attribute はID番号(integer)と浮動小数点数のリスト
    の文字列を引数にとる．

  * これら3つの属性は必須，and 唯一

- compact_lut_template Group statement
  compact_lut_template ( name ) {
    base_curves_group : string ;
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "string, string, ..." ) ;
  }

  * variable_1 と variable_2 の値は
    input_net_transition | total_output_net_capacitance

  * variable_3 の値は curve_parameters のみ

  * index_3 の文字列は init_current, peak_current, peak_voltage,
    peak_time, left_id, right_id

- dc_current_template Group statement
  dc_current_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
  }

  * variable_1, variable_2, variable_3 の値は
    2次元の場合は variable_1 が input_voltage，
    variable_2 が output_voltage
    3次元の場合は variable_1 が input_net_transition，
    variable_2 が output_net_transition，
    variable_3 が time

- em_lut_template Group statement
  em_lut_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    index_1 : ( "float, float, ..." ) ;
    index_2 : ( "float, float, ..." ) ;
  }

  * variable_1, variable2 の値は input_transition_time か
    total_output_net_capacitance

- {rise|fall}_net_delay Group statement
  fall_net_delay ( name ) {
  index_1 ( "float, float, ..." ) ;
  index_2 ( "float, float, ..." ) ;
  values ( "float, float, ...", "float, float, ...", ... ) ;
  }

  * 通常の table group

- {rise|fall}_transition_degradation Group statement
  * 通常の table group

- fault_lut_template Group statement
  fault_lut_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    index_1 ( "string, string, ..." ) ;
    index_2 ( "float, float, ..." ) ;
  }

  * variable_1 は fab_name
  * variable_2 は time_range

- input_voltage Group statement
  input_voltage ( name ) {
  vil : v_expr ;
  vih : v_expr ;
  vimin : v_expr ;
  vimax : v_expr ;
  }

- input_voltage や output_voltage に出てくる expression は
  以下みたいな感じ？
  expression : float_number
  	     | 'VDD'
	     | 'VSS'
	     | 'VCC'
             | '(' expression ')'
	     | '+' expression
	     | '-' expression
	     | expression '+' expression
	     | expression '-' expression
	     | expression '*' expression
	     | expression '/' expression

- fpga_isd Group statement
  fpga_isd ( name ) {
    drive : string ; // といいつつ Example では drive : 24 ; になってる．
    io_type : string ;
    slew : FAST | SLOW ;
  }

- iv_lut_template Group statement
  iv_lut_template ( name ) {
    variable_1 : iv_output_voltage ; // これ一択
    index_1 ( "float, float, ..." ) ;
  }

- lu_table_template Group statement
  lu_table_template ( name ) {
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    variable_4 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
    index_4 ( "float, float, ..." ) ;
    domain ( name ) { ... }
  }

  * In Composite Current Source (CCS) Noise Tables
    * ccsn_first_stage, ccsn_last_stage グループ内の以下のグループで使われる．

    * dc_current group

      variable_1 : input_voltage ;
      variable_2 : output_votage ;

    * output_current_rise group and output_current_fall group

      variable_1 : input_net_transition ;
      variable_2 : total_output_net_capacitance ;
      variable_3 : time ;

    * propagated_noise_low group and propagate_noise_high group

      variable_1 : input_noise_height ;
      variable_2 : input_noise_width ;
      variable_3 : total_output_net_capacitance ;
      variable_4 : time ;

  * In Timing Delay Tables

    variable_n に使える値は以下の通り

    input_net_transition
    total_output_net_capacitance
    output_net_length
    output_net_wire_cap
    output_net_pin_cap
    related_out_total_output_net_capacitance
    related_out_output_net_length
    related_out_output_net_wire_cap
    related_out_output_net_pin_cap

  * In Constraint Tables

    variable_n に使える値は以下の通り

    constrained_pin_transition
    related_pin_transition
    related_out_total_output_net_capacitance
    related_out_output_net_length
    related_out_output_net_wire_cap
    related_out_output_net_pin_cap

  * In Wire Delay Tables

    variable_n に使える値は以下の通り

    fanout_number
    fanout_pin_capacitance
    driver_slew

  * In Net Delay Tables

    variable_{1,2} に使える値は以下の通り

    output_transition
    rc_product

  * In Degradation Tables

    transition time degradation table の variable_{1,2} に使える値は以下の通り

    output_pin_transition
    connect_delay

    cell degradation table の variable_1 に使える値は以下の通り

    input_net_transition

- domain Group statement
  domain ( name ) {
    calc_mode : string ;
    variable_1 : string ;
    variable_2 : string ;
    variable_3 : string ;
    index_1 ( "float, float, ..." ) ;
    index_2 ( "float, float, ..." ) ;
    index_3 ( "float, float, ..." ) ;
  }
  domain Group は複数あり得る．

- maxcap_lut_template Group statement

  variable_1 : frequency ;
  vairable_2 : input_transition_time ;

- maxtrans_lut_template Group statement

  variable_1 : frequency ;
  variable_2 : input_transition_time ;
  variable_3 : total_output_net_capacitance ;

- noise_lut_template Group statement

  variable_1, variable_2 に使える値は
  input_noise_width と total_output_net_capacitance

- operationg_conditions Group statement
  operating_conditions ( name ) {
    calc_mode : string ;
    parameteri : float ; // i = 1..5
    process : float ; // 0.0 - 100.0
    temperature : float ;
    tree_type : string ; // best_case_tree, balanced_tree, worst_case_treen
    voltage : float ;
    power_rail ( string, float ) ; // one or more
  }

- output_current_template Group statement

  variable_1 と variable_2 に使える値は
  input_net_transition, total_output_net_capacitance
  variable_3 に使える値は time

- output_voltage Group statement
  output_voltage ( name ) {
    vol: v_expr ;
    voh: v_expr ;
    vomin: v_expr ;
    vomax: v_expr ;
  }

- part Group statement
  part ( name ) {
    default_step_level : string ;
    fpga_isd : string ;
    num_blockrams : integer ;
    num_cols : integer ;
    num_ffs : integer ;
    num_luts : integer ;
    num_rows : integer ;
    pin_count : 94 ;
    max_count ( string, integer ) ; // 複数あり
    valid_speed_grade ( string, string, ... ) ;
    valid_step_levels ( string, string, ... ) ;
    speed_grade () { }
  }

- speed_grade Group statement
  speed_grade ( name ) {
    fpga_isd : string ;
    step_level ( string ) ;
  }

- pg_current_template Group statement

  variable_{1,2,3,4} に使える値は
  input_net_transition
  total_output_net_capacitance
  time

  最後は必ず time でなければならない．
  input_net_transition は 0 か 1
  total_output_net_capacitance は 0 - 2

  index_n はオプション

- poly_template Group statement
  poly_template ( name ) {
    variables ( string, string, ... ) ;
    variable_{1,2,3,4}_range ( float, float ) ;
    mapping ( string, string ) ;
    oders ( integer, integer, ... ) ;
    domain ( name ) { ... }
  }

  * noise immunity template の場合，variables で使える値は
    input_noise_width
    total_output_net_capacitance
    voltage
    voltagei // i = 1 .. 5?
    temperature
    parametern // n ??

  * noise propagation template の場合，variables で使える値は
    input_hoise_height
    input_noise_width
    input_noise_tiem_to_peak
    total_output_net_capacitance
    voltage, voltagei, temperature
    parametern

  * steady state group の場合，
    iv_output_voltage
    voltage
    voltagei
    temperature
    parametern

  * timing group の場合，以下の4セットとなる．
    - Set 1
      input_net_transition
      constrained_pin_transition

    - Set 2
      total_output_net_capacitance
      output_net_length, output_net_wire_cap
      output_net_pin_cap
      related_pin_transition

    - Set 3
      related_out_total_output_net_capaitance
      related_out_output_net_length
      related_out_output_net_wire_cap
      related_out_output_net_pin_cap

    - Set 4
      temperature, voltage
      voltagei

    マニュアル中の ',' と '|' の使い分けの意味がわからん．

- poly_template 中の domain Group statement
  domain ( name ) {
    calc_mode : string ;
    variables ( string, string, ... ) ;
    variable_{1,2,3,4}_range ( float, float ) ;
    mapping ( string, string ) ;
    orders ( integer, integer, ... ) ;
  }

- power_lut_template Group statement
  通常の template と同じ．

  * variable_1 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

  * variable_2 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

  * variable_3 : input_transition_time
                 total_output_net_capacitance
		 equal_or_opposite_output_net_capacitance

- power_poly_template Group statement
  * 通常の poly_template と同じ

  * variables に使える値は
    equal_or_opposite_output_net_capacitance
    input_net_transition
    total_output_net_capacitance
    output_net_length
    temperature
    voltage
    voltagei
    parameteri

- power_supply Group statement
  power_supply ( name ) {
    default_power_rail : string ;
    power_rail ( string, float ) ;
  }

  * power_rail complex attribute は複数あり得る．

- propagation_lut_template Group statement

  * 通常の template と同じ

  * variable に使える値は以下の通り
    input_noise_width
    input_noise_height
    total_output_net_capacitance

- scaled_cell Group statement

  sclaed_cell ( existing_cell, operating_conditions_group ) {
    area : float ;
    auxiliary_pad_cell : true | false ;
    bus_naming_style : "string" ;
    cell_footprint : string ;
    cell_leakage_power : float ;
    clock_gating_integrated_cell : string ;
    contential_condition : "Boolean expression" ;
    dont_fault : sa0 | sa1 | sa01 ;
    dont_touch : true | false ;
    dont_use : true | false ;
    geometry_print : string ;
    handle_negative_constraint : true | false ;
    is_clock_gating_cell : true | false ;
    map_only : true | false ;
    pad_cell : true | false ;
    pad_type : clock ;
    preferred : true | false ;
    scaling_factors : string ;
    use_for_size_only : true | false ;
    vhdl_name : "string" ;
    pin_equal ( "string, string, ..." ) ;
    pin_opposite ( "string, string, ...", "string, string, ..." ) ;
    rail_connection ( string, string ) ;
    bundle ( ) { ... }
    bus ( ) { ... }
    ff ( ) { ... }
    ff_bank ( ) { ... }
    generated_clock ( ) { ... }
    latch ( ) { ... }
    latch_bank ( ) { ... }
    leakage_power ( ) { ... }
    lut ( ) { ... }
    mode_definition ( ) { ... }
    pin ( ) { ... }
    routing_track ( ) { ... }
    statetable ( ) { ... }
    test_cell ( ) { ... }
    type ( ) { ... }
  }

- sensitization Group statement

  sensitization ( name ) {
    pin_names ( string, string, ... ) ;
    vector ( integer, string ) ;
  }

- scaling_factors Group statement

  scaling_factors ( name ) {

  }

  詳細は "Building Environments" chapter in the Library Compiler User
  Guide: Modeling Timing, Signal Integrity, and Power in Technology Libraries.

- timing_range Group statement

  timing_range ( name ) {
    faster_factor : float ;
    slower_factor : float ;
  }

- type Group statement

  type ( name ) {
    base_type : array ; // 'array' 一択
    bit_from : integer ;
    bit_to : integer ;
    bit_width : integer ;
    data_type : bit ; // 'bit' 一択
    downto : true | false ;
  }

- user_parameters Group statement

  user_parameters () {
    parameteri : float ; // i = 1..?
  }

- wire_load Group statement

  wire_load ( name ) {
    area : float ;
    capacitance : float ;
    resistance : float ;
    slope : float ;
    fanout_length ( integer, float, float, float, integer ) ;
  }

  fanout_length の各パラメータは
  fanout : ファンアウト数 (ドライバを除いたピン数)
  length : ネット長
  average_capacitance, standard_deviation, number_of_nets :
           Sysnopsys Floorplan Manager User Guide を見ろ

- wire_load_selection Group statement

  wire_load_selection ( name ) {
    wire_load_from_area ( float, float, string ) ;xs
  }

  詳細は "Library Deveopment Procedure" and "Defining I/O Pads"
  chapters in the Library Compiler User Guide: Methodology and
  Modeling Functionality in Technology Libraries and the "Building
  Environments" chapter in the Library Compiler User Guide: Modeling
  Timing, Signal Integrity, and Power in Technology Libraries.

- wire_load_table Group statement

  wire_load_table ( name ) {
    fanout_area ( integer, float ) ;
    fanout_capacitance ( integer, float ) ;
    fanout_length ( integer, float ) ;
    fanout_resistance ( integer, float ) ;
  }
